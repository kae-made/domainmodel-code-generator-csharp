<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Kae.CIM.MetaModel.CIMofCIM" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : <#= version #>
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;

namespace <#= nameSpace #>
{
<#
    var domainClassName = GeneratorNames.GetDomainClassName(objDef);
    var domainBaseInterfaceName = GeneratorNames.GetDomainClassBaseInterfaceName();
    var subClassInterfaces = DomainClassDefs.GetSubClassInterfaces(objDef);
    var domainClassBaseName = GeneratorNames.GetDomainClassImplName(objDef);
    string stateMachineLocalVariableName = "stateMachine";
#>
    public partial class <#= domainClassBaseName #> : <#= domainClassName #>
    {
        private static readonly string className = "<#= objDef.Attr_Key_Lett #>";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

<#
    bool hasStateMachine = false;
    var ismDef = objDef.LinkedFromR518();
    if (ismDef != null)
    {
        hasStateMachine = true;
    }

    var implAttrDefs = new List<AttributeDef>();
    var attrDefs = objDef.LinkedFromR102();
    foreach (var attrDef in attrDefs)
    {
        var implAttrDef = new AttributeDef() { AttrDef = attrDef, IsIdentity = false, IsReferential = false, IsUniqueId = false, IsState = false };
        var attrPropName = GeneratorNames.GetAttrPropertyName(attrDef);
        var dtDef = DomainDataTypeDefs.GetBaseDT(attrDef);
        var attrPropDataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
        implAttrDef.DataTypeName = attrPropDataTypeName;
        bool generate = true;
        if (hasStateMachine)
        {
            if (dtDef.Attr_Name == "state<State_Model>")
            {
                implAttrDef.IsState = true;
            }
        }

        var subAttrDef = attrDef.SubClassR106();
        if (subAttrDef is not CIMClassO_RATTR)
        {
            var oidaDefs = attrDef.LinkedOneSideR105();
            foreach (var oidaDef in oidaDefs)
            {
                var oidDef = oidaDef.LinkedOneSideR105();
                implAttrDef.IsIdentity = true;
                if (dtDef.Attr_Name == "unique_id")
                {
                    implAttrDef.IsUniqueId = true;
                }
            }
        }
        else
        {
            implAttrDef.IsReferential = true;
        }
        implAttrDefs.Add(implAttrDef);
    }
    // Constructor Gen
    string constructorArgs = "";
    foreach (var implAttrDef in implAttrDefs)
    {
        if (!implAttrDef.IsReferential)
        {
            if (!string.IsNullOrEmpty(constructorArgs))
            {
                constructorArgs += ", ";
            }
            constructorArgs += implAttrDef.AttrDef.Attr_Name;
        }
    }
    // Constructor Signature
    var logInstanceCreation = new logging.Logging("logger", "            ", objDef, "newInstance", logging.Logging.Mode.InstanceLifeCycle, "create");
    var logInstanceCreationGen = logInstanceCreation.TransformText();
#>
        public static <#= domainClassBaseName #> CreateInstance(InstanceRepository instanceRepository, Logger logger)
        {
            var newInstance = new <#= domainClassBaseName #>(instanceRepository, logger);
<#= logInstanceCreationGen #>
            instanceRepository.Add(newInstance);

            return newInstance;
        }

        public <#= domainClassBaseName #>(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
<#
    // Constructor Body
    foreach(var implAttrDef in implAttrDefs)
    {
        string propName = GeneratorNames.GetAttrPropertyName(implAttrDef.AttrDef);
        string propLocalName = GeneratorNames.GetAttrPropertyLocalName(implAttrDef.AttrDef);
        if (implAttrDef.IsIdentity && (implAttrDef.IsReferential == false))
        {
            if (implAttrDef.IsUniqueId)
            {
                var newGuid = Guid.NewGuid().ToString();
#>
            <#= propLocalName #> = Guid.NewGuid().ToString();
<#
            }
        }
        else
        {
            if (implAttrDef.IsState)
            {
                string stateMachineClassName = GeneratorNames.GetStateMachineClassName(objDef);
#>
            <#= stateMachineLocalVariableName #> = new <#= stateMachineClassName #>(this, logger);
<#
            }
        }
    }
#>
        }
<#

    // local member Attr Gen
    if (implAttrDefs.Count()>0)
    {
#>

<#
    }
    foreach(var implAttrDef in implAttrDefs)
    {
        if (!implAttrDef.IsState)
        {
            var dtDef = DomainDataTypeDefs.GetBaseDT(implAttrDef.AttrDef);
            var attrPropDataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
            string localVarName = GeneratorNames.GetAttrPropertyLocalName(implAttrDef.AttrDef);
#>
        <#= attrPropDataTypeName #> <#= localVarName #>;
<#
        }
        else
        {
            string stateMachineClassName = GeneratorNames.GetStateMachineClassName(objDef);
#>
        <#= stateMachineClassName #> <#= stateMachineLocalVariableName #>;
<#
        }
    }
    // property implementation
    if (implAttrDefs.Count()>0)
    {
#>

<#
    }
    foreach(var implAttrDef in implAttrDefs)
    {
        var dtDef = DomainDataTypeDefs.GetBaseDT(implAttrDef.AttrDef);
        var attrPropDataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
        string localVarName = GeneratorNames.GetAttrPropertyLocalName(implAttrDef.AttrDef);
        string propName = GeneratorNames.GetAttrPropertyName(implAttrDef.AttrDef);
        string accessorImple = "";
        if (implAttrDef.IsState)
        {
            accessorImple = "get { " + $"return {stateMachineLocalVariableName}.CurrentState;" + " }";
        }
        else
        {
            accessorImple = "get { " + $"return {localVarName}" + "; }";
        }
        if (!implAttrDef.IsReferential)
        {
            if (!implAttrDef.IsState)
            {
                accessorImple += " set { " + $"{localVarName} = value" + "; }";
            }
        }
#>
        public <#= attrPropDataTypeName #> <#= propName #> { <#= accessorImple #> }
<#
    }

    var joinedRgos = DomainClassDefs.GetJoinedRGOs(objDef);
    if (joinedRgos.Count()>0)
    {
#>

<#
    }
    foreach (var rgo in joinedRgos)
    {
        var subRgo = rgo.SubClassR205();
        if (subRgo is CIMClassR_FORM)
        {
            var rformDef = (CIMClassR_FORM)subRgo;
            var rsimpDef = rformDef.LinkedToR208();
            var relDef = rsimpDef.CIMSuperClassR_REL();
            var partDefs = rsimpDef.LinkedFromR207();
            if (partDefs.Count() > 0)
            {
                if (partDefs.Count() > 1)
                {
                    // TODO: ???
                }
                var partDef = partDefs.First();
                var targetObjDef = partDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
                var targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                if (partDef.Attr_Mult == 0)
                {
                    string relVarName = GeneratorNames.GetRelLocalVariableName(relDef, targetObjDef, partDef.Attr_Txt_Phrs);
#>
        private <#= targetClassName #> <#= relVarName #>;
<#
                }
            }
        }
        else if (subRgo is CIMClassR_SUB)
        {
            var rsupDef = (CIMClassR_SUB)subRgo;
            var rsubsupDef = rsupDef.LinkedToR213();
            var relDef = rsubsupDef.CIMSuperClassR_REL();
            var targetObjDef = rsubsupDef.LinkedFromR212().CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            string targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
            string relVarName = GeneratorNames.GetRelLocalVariableName(relDef, targetObjDef, "");
#>
        private <#= targetClassName #> <#= relVarName #>;
<#
        }
        else if (subRgo is CIMClassR_ASSR)
        {
            var rassrDef = (CIMClassR_ASSR)subRgo;
            var rassocDef = rassrDef.LinkedToR211();
            var relDef = rassocDef.CIMSuperClassR_REL();
            var raoneDef = rassocDef.LinkedFromR209();
            var raothDef = rassocDef.LinkedFromR210();

            var oneObjDef = raoneDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            var oneObjTypeName = GeneratorNames.GetDomainClassName(oneObjDef);
            var oneArgName = $"oneInstance{GeneratorNames.ToProgramAvailableString(raoneDef.Attr_Txt_Phrs)}";
            string relVarName = GeneratorNames.GetRelLocalVariableName(relDef, oneObjDef, raoneDef.Attr_Txt_Phrs);
#>
        private <#= oneObjTypeName #> <#= relVarName #>;
<#

            var otherObjDef = raothDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            var otherObjTypeName = GeneratorNames.GetDomainClassName(otherObjDef);
            var otherArgName = $"otherInstance{GeneratorNames.ToProgramAvailableString(raothDef.Attr_Txt_Phrs)}";
            relVarName = GeneratorNames.GetRelLocalVariableName(relDef, otherObjDef, raothDef.Attr_Txt_Phrs);
#>
        private <#= otherObjTypeName #> <#= relVarName #>;
<#
        }
    }

    bool written = false;
    if (joinedRgos.Count()>0)
    {
#>

<#
    }
    foreach(var rgo in joinedRgos)
    {
        var subRgo = rgo.SubClassR205();
        if (subRgo is CIMClassR_FORM)
        {
            var rformDef = (CIMClassR_FORM)subRgo;
            var rsimpDef = rformDef.LinkedToR208();
            var relDef = rsimpDef.CIMSuperClassR_REL();
            var partDefs = rsimpDef.LinkedFromR207();
            if (partDefs.Count() > 0)
            {
                if (partDefs.Count() > 1)
                {
                    // TODO: ???
                }
                var partDef = partDefs.First();
                string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "", partDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
                var targetObjDef = partDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
                var targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                string returnType = "";
                string condTargetVarName = "instance";
                string condition = GetRelCondition(rgo, targetClassName);
                string unRelCondtion = GetUnrelCondition(rgo, targetClassName, condTargetVarName);
                if (partDef.Attr_Mult == 0)
                {
                    returnType = targetClassName;
                    string methodNameLink = GeneratorNames.GetRelationshipMethodName(relDef, "", partDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Link);
                    string methodNameUnLink = GeneratorNames.GetRelationshipMethodName(relDef, "", partDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Unlink);
                    string relVarName = GeneratorNames.GetRelLocalVariableName(relDef, targetObjDef, partDef.Attr_Txt_Phrs);
                    string thisLogArgs = GetIdentityPropertiesArgsInFormattedString(objDef, "this");
                    string targetLogArgs = GetIdentityPropertiesArgsInFormattedString(targetObjDef, condTargetVarName);
#>
        public <#= returnType #> <#= methodNameLinked #>()
        {
            if (<#= relVarName #> == null)
            {
                var candidates = instanceRepository.GetDomainInstances("<#= targetObjDef.Attr_Key_Lett #>").Where(inst=>(<#= condition #>));
                <#= relVarName #> = (<#= returnType #>)candidates.First();
            }
            return <#= relVarName #>;
        }

        public bool <#= methodNameLink #>(<#= targetClassName #> <#= condTargetVarName #>)
        {
            bool result = false;
            if (<#= relVarName #> == null)
            {
<#
                    var orefDefs = rgo.LinkedOtherSideR111();
                    foreach(var orefDef in orefDefs)
                    {
                        var thisAttrDef = orefDef.LinkedToR108().CIMSuperClassO_ATTR();
                        var tgtAttrDef = orefDef.LinkedOtherSideR111().LinkedOtherSideR110().LinkedOtherSideR105();
                        string thisAttrName = GeneratorNames.GetAttrPropertyLocalName(thisAttrDef);
                        string tgtAttrName = GeneratorNames.GetAttrPropertyName(tgtAttrDef);
#>
                this.<#= thisAttrName #> = <#= condTargetVarName #>.<#= tgtAttrName #>;
<#
                    }
                    var logLink = new logging.Logging("logger", "                ", objDef, "this", logging.Logging.Mode.LinkLifeCycle, "link");
                    logLink.oneObjDef = targetObjDef;
                    logLink.oneVarName = "instance";
                    var logLinkGen = logLink.TransformText();
                    var logUnlink = new logging.Logging("logger", "                ", objDef, "this", logging.Logging.Mode.LinkLifeCycle, "unlink");
                    logUnlink.oneObjDef = targetObjDef;
                    logUnlink.oneVarName = "instance";
                    var logUnlinkGen = logUnlink.TransformText();
#>

<#= logLinkGen #>
                result = true;
            }
            return result;
        }
        public bool <#= methodNameUnLink #>(<#= targetClassName #> <#= condTargetVarName #>)
        {
            bool result = false;
            if (<#= relVarName #> != null && ( <#= unRelCondtion #> ))
            {
<#
                    foreach(var orefDef in orefDefs)
                    {
                        var thisAttrDef = orefDef.LinkedToR108().CIMSuperClassO_ATTR();
                        var tgtAttrDef = orefDef.LinkedOtherSideR111().LinkedOtherSideR110().LinkedOtherSideR105();
                        string thisAttrName = GeneratorNames.GetAttrPropertyLocalName(thisAttrDef);
#>
                this.<#= thisAttrName #> = null;
<#
                    }
#>
                <#= relVarName #> = null;

<#= logUnlinkGen #>

                result = true;
            }
            return result;
        }
<#
                }
                else
                {
                    returnType = $"IEnumerable<{targetClassName}>";
#>
        <#= returnType #> <#= methodNameLinked #>()
        {
            <#= returnType #> result = List<<#= targetClassName #>>();
            var candidates = instanceRepository.GetDomainInstances("<#= targetObjDef.Attr_Key_Lett #>").Where(inst=>(<#= condition #>));

            foreach (var inst in candidates)
            {
                result.Add((<#= targetClassName #>)inst);
            }

            return result;
        }

<#
                }
                written = true;
            }
        }
        else if (subRgo is CIMClassR_SUB)
        {
            var rsupDef = (CIMClassR_SUB)subRgo;
            var rsubsupDef = rsupDef.LinkedToR213();
            var relDef = rsubsupDef.CIMSuperClassR_REL();
            string methodNameLink = GeneratorNames.GetRelationshipMethodName(relDef, "", "", GeneratorNames.RelLinkMethodType.Link);
            string methodNameUnlink = GeneratorNames.GetRelationshipMethodName(relDef, "", "", GeneratorNames.RelLinkMethodType.Unlink);
            var targetObjDef = rsubsupDef.LinkedFromR212().CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            string targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
            string methodNameLinked = GeneratorNames.GetGetSuperClassMethodName(relDef, objDef);
            string condTargetVarName = "instance";
            string condition = GetRelCondition(rgo, targetClassName);
            string unRelCondtion = GetUnrelCondition(rgo, targetClassName, condTargetVarName);
            string relVarName = GeneratorNames.GetRelLocalVariableName(relDef, targetObjDef, "");
            string thisLogArgs = GetIdentityPropertiesArgsInFormattedString(objDef, "this");
            string targetLogArgs = GetIdentityPropertiesArgsInFormattedString(targetObjDef, condTargetVarName);

            var logLink = new logging.Logging("logger", "                ", objDef, "this", logging.Logging.Mode.LinkLifeCycle, "link");
            logLink.oneObjDef = targetObjDef;
            logLink.oneVarName = condTargetVarName;
            var logLinkGen = logLink.TransformText();
            var logUnlink = new logging.Logging("logger", "                ", objDef, "this", logging.Logging.Mode.LinkLifeCycle, "unlink");
            logUnlink.oneObjDef = targetObjDef;
            logUnlink.oneVarName = condTargetVarName;
            var logUnlinkGen = logUnlink.TransformText();
#>
        public <#= targetClassName #> <#= methodNameLinked #>()
        {
            if (<#= relVarName #> == null)
            {
                var candidates = instanceRepository.GetDomainInstances("<#= targetObjDef.Attr_Key_Lett #>").Where(inst => (<#= condition #>));
                <#= relVarName #> = (<#= targetClassName #>)candidates.First();
            }
            return <#= relVarName #>;
        }
        public bool <#= methodNameLink #>(<#= targetClassName #> <#= condTargetVarName #>)
        {
            bool result = false;
            if (<#= relVarName #> == null)
            {
<#
                    var orefDefs = rgo.LinkedOtherSideR111();
                    foreach(var orefDef in orefDefs)
                    {
                        var thisAttrDef = orefDef.LinkedToR108().CIMSuperClassO_ATTR();
                        var tgtAttrDef = orefDef.LinkedOtherSideR111().LinkedOtherSideR110().LinkedOtherSideR105();
                        string thisAttrName = GeneratorNames.GetAttrPropertyLocalName(thisAttrDef);
                        string tgtAttrName = GeneratorNames.GetAttrPropertyName(tgtAttrDef);
#>
                this.<#= thisAttrName #> = <#= condTargetVarName #>.<#= tgtAttrName #>;
<#
                    }
#>

<#= logLinkGen #>
                result = true;
            }
            return result;
        }
        public bool <#= methodNameUnlink #>(<#= targetClassName #> <#= condTargetVarName #>)
        {
            bool result = false;
            if (<#= relVarName #> != null && ( <#= unRelCondtion #> ))
            {
<#
                    foreach(var orefDef in orefDefs)
                    {
                        var thisAttrDef = orefDef.LinkedToR108().CIMSuperClassO_ATTR();
                        var tgtAttrDef = orefDef.LinkedOtherSideR111().LinkedOtherSideR110().LinkedOtherSideR105();
                        string thisAttrName = GeneratorNames.GetAttrPropertyLocalName(thisAttrDef);
#>
                this.<#= thisAttrName #> = null;
<#
                    }
#>
                <#= relVarName #> = null;

<#= logUnlinkGen #>
                result = true;
            }
            return result;
        }

<#
        }
        else if (subRgo is CIMClassR_ASSR)
        {
            var rassrDef = (CIMClassR_ASSR)subRgo;
            var rassocDef = rassrDef.LinkedToR211();
            var relDef = rassocDef.CIMSuperClassR_REL();
            var raoneDef = rassocDef.LinkedFromR209();
            var raothDef = rassocDef.LinkedFromR210();
            string methodNameLink = GeneratorNames.GetRelationshipMethodName(relDef, "", "", GeneratorNames.RelLinkMethodType.Link);
            string methodNameUnlink = GeneratorNames.GetRelationshipMethodName(relDef, "", "", GeneratorNames.RelLinkMethodType.Unlink);

            string methodNameLinkedOne = GeneratorNames.GetRelationshipMethodName(relDef, "One", raoneDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
            var oneObjDef = raoneDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            var oneObjTypeName = GeneratorNames.GetDomainClassName(oneObjDef);
            var oneArgName = $"oneInstance{GeneratorNames.ToProgramAvailableString(raoneDef.Attr_Txt_Phrs)}";
            string oneCondition = GetRelCondition(rgo, oneObjTypeName);
            string oneUnRelCondtion = GetUnrelCondition(rgo, oneObjTypeName, oneArgName);
            string relOneVarName = GeneratorNames.GetRelLocalVariableName(relDef, oneObjDef, raoneDef.Attr_Txt_Phrs);

            string methodNameLinkedOther = GeneratorNames.GetRelationshipMethodName(relDef, "Other", raothDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
            var otherObjDef = raothDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            var otherObjTypeName = GeneratorNames.GetDomainClassName(otherObjDef);
            var otherArgName = $"otherInstance{GeneratorNames.ToProgramAvailableString(raothDef.Attr_Txt_Phrs)}";
            string otherCondition = GetRelCondition(rgo, otherObjTypeName);
            string otherUnRelCondtion = GetUnrelCondition(rgo, otherObjTypeName, otherArgName);
            string relOtherVarName = GeneratorNames.GetRelLocalVariableName(relDef, otherObjDef, raothDef.Attr_Txt_Phrs);

            string thisLogArgs = GetIdentityPropertiesArgsInFormattedString(objDef, "this");
            string oneLogArgs = GetIdentityPropertiesArgsInFormattedString(oneObjDef, relOneVarName);
            string otherLogArgs = GetIdentityPropertiesArgsInFormattedString(otherObjDef, relOtherVarName);

            var logLink = new logging.Logging("logger", "                ", objDef, "this", logging.Logging.Mode.LinkLifeCycle, "link");
            logLink.oneObjDef = oneObjDef;
            logLink.oneVarName = oneArgName;
            logLink.otherObjDef = otherObjDef;
            logLink.otherVarName = otherArgName;
            var logLinkGen = logLink.TransformText();
            var logUnlink = new logging.Logging("logger", "                ", objDef, "this", logging.Logging.Mode.LinkLifeCycle, "unlink");
            logUnlink.oneObjDef = oneObjDef;
            logUnlink.oneVarName = oneArgName;
            logLink.otherObjDef = otherObjDef;
            logLink.otherVarName = otherArgName;
            var logUnlinkGen = logUnlink.TransformText();

            var orefDefs = rgo.LinkedOtherSideR111();
#>
        public bool <#= methodNameLink #>(<#= oneObjTypeName #> <#= oneArgName #>, <#= otherObjTypeName #> <#= otherArgName #>)
        {
            bool result = false;
            if (<#= relOneVarName #> == null && <#= relOtherVarName #> == null)
            {
<#
            foreach (var orefDef in orefDefs)
            {
                var thisRefAttrDef = orefDef.LinkedToR108().CIMSuperClassO_ATTR();
                var tgtRtdaDef = orefDef.LinkedOtherSideR111();
                var tgtAttrDef = tgtRtdaDef.LinkedOtherSideR110().LinkedOtherSideR105();
                var tgtObjDef = tgtAttrDef.LinkedToR102();
                var tgtObjTypeName = GeneratorNames.GetDomainClassName(tgtObjDef);
                var thisAttrPropLocalName = GeneratorNames.GetAttrPropertyLocalName(thisRefAttrDef);
                var tgtAttrPropName = GeneratorNames.GetAttrPropertyName(tgtAttrDef);
                var subRtoDef = tgtRtdaDef.LinkedOneSideR110().SubClassR204();
                if (subRtoDef is CIMClassR_AONE)
                {
#>
                this.<#= thisAttrPropLocalName #> = <#= oneArgName #>.<#=tgtAttrPropName  #>;
<#
                }
                else if (subRtoDef is CIMClassR_AOTH)
                {
#>
                this.<#= thisAttrPropLocalName #> = <#= otherArgName #>.<#=tgtAttrPropName  #>;
<#
                }
            }
#>

<#= logLinkGen #>
                result = true;
            }
            return result;
        }
        public bool <#= methodNameUnlink #>(<#= oneObjTypeName #> <#= oneArgName #>, <#= otherObjTypeName #> <#= otherArgName #>)
        {
            bool result = false;
            if (<#= relOneVarName #> != null && <#= relOtherVarName #> != null)
            {
                if ((<#= oneUnRelCondtion #>) && (<#= otherUnRelCondtion #>))
                {

<#
            foreach (var orefDef in orefDefs)
            {
                var thisRefAttrDef = orefDef.LinkedToR108().CIMSuperClassO_ATTR();
                var tgtRtdaDef = orefDef.LinkedOtherSideR111();
                var tgtAttrDef = tgtRtdaDef.LinkedOtherSideR110().LinkedOtherSideR105();
                var tgtObjDef = tgtAttrDef.LinkedToR102();
                var tgtObjTypeName = GeneratorNames.GetDomainClassName(tgtObjDef);
                var thisAttrPropLocalName = GeneratorNames.GetAttrPropertyLocalName(thisRefAttrDef);
                var subRtoDef = tgtRtdaDef.LinkedOneSideR110().SubClassR204();
                if (subRtoDef is CIMClassR_AONE)
                {
#>
                    this.<#= thisAttrPropLocalName #> = null;
<#
                }
                else if (subRtoDef is CIMClassR_AOTH)
                {
#>
                    this.<#= thisAttrPropLocalName #> = null;
<#
                }
            }
#>
                    <#= relOneVarName #> = null;
                    <#= relOtherVarName #> = null;

<#= logUnlinkGen #>
                    result = true;
                }
            }
            return result;
        }
        public <#= oneObjTypeName #> <#= methodNameLinkedOne #>()
        {
            if (<#= relOneVarName #> == null)
            {
                var candidates = instanceRepository.GetDomainInstances("<#= oneObjDef.Attr_Key_Lett #>").Where(inst=>(<#= oneCondition #>));
                <#= relOneVarName #> = (<#= oneObjTypeName #>)candidates.First();
            }
            return <#= relOneVarName #>;
        }
        public <#= otherObjTypeName #> <#= methodNameLinkedOther #>()
        {
            if (<#= relOtherVarName #> == null)
            {
                var candidates = instanceRepository.GetDomainInstances("<#= otherObjDef.Attr_Key_Lett #>").Where(inst=>(<#= otherCondition #>));
                <#= relOtherVarName #> = (<#= otherObjTypeName #>)candidates.First();
            }
            return <#= relOtherVarName #>;
        }

<#
        }
    }

    var joinedRtos = DomainClassDefs.GetJoinedRTOs(objDef);
    if (joinedRtos.Count() > 0)
    {
#>

<#
    }
    foreach(var rto in joinedRtos)
    {
        var subRto = rto.SubClassR204();
        if (subRto is CIMClassR_PART)
        {
            var rpartDef = (CIMClassR_PART)subRto;
            var rsimpDef = rpartDef.LinkedToR207();
            var relDef = rsimpDef.CIMSuperClassR_REL();
            var rformDef = rsimpDef.LinkedFromR208();
            if (rformDef != null)
            {
                var targetObjDef = rformDef.CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
                string targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "", rformDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
                string condition = GetRelCondition(rformDef.CIMSuperClassR_RGO(), domainClassName, false);
                string returnType = "";
                if (rformDef.Attr_Mult == 0)
                {
                    returnType = targetClassName;
#>
        public <#= returnType #> <#= methodNameLinked #>()
        {
            var candidates = instanceRepository.GetDomainInstances("<#= targetObjDef.Attr_Key_Lett #>").Where(inst=>(<#= condition #>));
            return (<#= targetClassName #>)candidates.First();
        }
<#
                }
                else
                {
                    returnType = $"IEnumerable<{targetClassName}>";
#>
        public <#= returnType #> <#= methodNameLinked #>()
        {
            var result = new List<<#= targetClassName #>>();
            var candidates = instanceRepository.GetDomainInstances("<#= targetObjDef.Attr_Key_Lett #>").Where(inst=>(<#= condition #>));
            foreach (var c in candidates)
            {
                result.Add((<#= targetClassName #>)c);
            }
            return result;
        }
<#
                }
            }
        }
        else if (subRto is CIMClassR_AONE)
        {
            var raoneDef = (CIMClassR_AONE)subRto;
            var rassocDef = raoneDef.LinkedToR209();
            var relDef = rassocDef.CIMSuperClassR_REL();
            var targetObjDef = rassocDef.LinkedFromR211().CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
            var raothDef = rassocDef.LinkedFromR210();
            string targetTypeName = GeneratorNames.GetDomainClassName(targetObjDef);
            string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef,"One",raothDef.Attr_Txt_Phrs,GeneratorNames.RelLinkMethodType.Linked);
            string condition = GetRelCondition(rassocDef.LinkedFromR211().CIMSuperClassR_RGO(), domainClassName, false);
            string returnType = "";
            if (raothDef.Attr_Mult == 0)
            {
                returnType = targetTypeName;
#>
        public <#= returnType #> <#= methodNameLinked #>()
        {
            var candidates = instanceRepository.GetDomainInstances("<#= targetObjDef.Attr_Key_Lett #>").Where(inst=>(<#= condition #>));
            return (<#= targetTypeName #>)candidates.First();
        }
<#
            }
            else
            {
                returnType = $"IEnumerable<{targetTypeName}>";
#>
        public <#= returnType #> <#= methodNameLinked #>()
        {
            var result = new List<<#= targetTypeName #>>();
            var candidates = instanceRepository.GetDomainInstances("<#= targetObjDef.Attr_Key_Lett #>").Where(inst=>(<#= condition #>));
            foreach (var c in candidates)
            {
                result.Add((<#= targetTypeName #>)c);
            }
            return result;
        }
<#
            }
        }
        else if (subRto is CIMClassR_AOTH)
        {
            var raothDef = (CIMClassR_AOTH)subRto;
            var rassocDef = raothDef.LinkedToR210();
            var relDef = rassocDef.CIMSuperClassR_REL();
            var targetObjDef = rassocDef.LinkedFromR211().CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
            string targetType = GeneratorNames.GetDomainClassName(targetObjDef);
            var raoneDef = rassocDef.LinkedFromR209();
            string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "Other", raoneDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
            string condition = GetRelCondition(rassocDef.LinkedFromR211().CIMSuperClassR_RGO(), domainClassName, false);
            string returnType = "";
            if (raoneDef.Attr_Mult == 0)
            {
                returnType = targetType;
#>
        public <#= returnType #> <#= methodNameLinked #>()
        {
            var candidates = instanceRepository.GetDomainInstances("<#= targetObjDef.Attr_Key_Lett #>").Where(inst=>(<#= condition #>));
            return (<#= targetType #>)candidates.First();
        }
<#
            }
            else
            {
                returnType = $"IEnumerable<{targetType}>";
#>
        public <#= returnType #> <#= methodNameLinked #>()
        {
            var result = new List<<#= targetType #>>();
            var candidates = instanceRepository.GetDomainInstances("<#= targetObjDef.Attr_Key_Lett #>").Where(inst=>(<#= condition #>));
            foreach (var c in candidates)
            {
                result.Add((<#= targetType #>)c);
            }
            return result;
        }
<#
            }
        }
        else if (subRto is CIMClassR_SUPER)
        {
            var superDef = (CIMClassR_SUPER)subRto;
            var subsupDef = superDef.LinkedToR212();
            var subsupRelDef = subsupDef.CIMSuperClassR_REL();
            var subClassIFName = GeneratorNames.GetSubRelInterfaceName(subsupRelDef);
            var subClassGetMethodName = GeneratorNames.GetSubRelClassMethodName(subsupRelDef);
            var subDefs = subsupDef.LinkedFromR213();
            string subClassKeys = "";
            foreach (var subDef in subDefs)
            {
                if (!string.IsNullOrEmpty(subClassKeys))
                {
                    subClassKeys += ", ";
                }
                var subObjDef = subDef.CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
                subClassKeys += $"\"{subObjDef.Attr_Key_Lett}\"";
            }
            string superGetMethodName = GeneratorNames.GetGetSuperClassMethodName(subsupRelDef,objDef);
#>
        public <#= subClassIFName #> <#= subClassGetMethodName #>()
        {
            <#= subClassIFName #> result = null;
            var subClassKeys = new List<string>() { <#= subClassKeys #> };
            foreach (var key in subClassKeys)
            {
                var candidates = instanceRepository.GetDomainInstances(key).Where(inst=>((this == ((<#= subClassIFName #>)inst).<#= superGetMethodName #>())));
                if (candidates.Count()>0)
                {
                    result = (<#= subClassIFName #>)candidates.First();
                    break;
                }
            }
            return result;
        }
<#
                foreach(var subDef in subDefs)
                {
                    var subObjDef = subDef.CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
                    string methodNameLinked = GeneratorNames.GetRelationshipMethodName(subsupRelDef, "", "", GeneratorNames.RelLinkMethodType.Linked) + subObjDef.Attr_Key_Lett;
                    string returnType = GeneratorNames.GetDomainClassName(subObjDef);
#>
        public <#= returnType #> <#= methodNameLinked #>()
        {
            return (<#= returnType #>)<#= subClassGetMethodName #>();
        }

<#
                }

        }
    }
    if (hasStateMachine)
    {
        string takeEventMethodName = GeneratorNames.GetTakeEventMethodName();
        string takeEventLogArgs = GetIdentityPropertiesArgsInFormattedString(objDef, "this");
#>
        public void <#= takeEventMethodName #>(EventData domainEvent)
        {
            <#= stateMachineLocalVariableName #>.ReceivedEvent(domainEvent).Wait();
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:<#= objDef.Attr_Key_Lett #>(<#= takeEventLogArgs #>):takeEvent({domainEvent.EventNumber})");
        }

<#
    }

#>
        
        public bool Validate()
        {
            bool isValid = true;
<#
    foreach (var rgo in joinedRgos)
    {
        var subRgo = rgo.SubClassR205();
        if (subRgo is CIMClassR_FORM)
        {
            var rformDef = (CIMClassR_FORM)subRgo;
            var rsimpDef = rformDef.LinkedToR208();
            var relDef = rsimpDef.CIMSuperClassR_REL();
            var partDefs = rsimpDef.LinkedFromR207();
            if (partDefs.Count() > 0)
            {
                if (partDefs.Count() > 1)
                {
                    // TODO: ???
                }
                var partDef = partDefs.First();
                var targetObjDef = partDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
                var targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                if (partDef.Attr_Mult == 0)
                {
                    string relVarName = GeneratorNames.GetRelLocalVariableName(relDef, targetObjDef, partDef.Attr_Txt_Phrs);
                    if (partDef.Attr_Cond==0)
                    {
#>
            if (<#= relVarName #> == null)
            {
                isValid = false;
            }
<#
                    }
                }
            }
        }
        else if (subRgo is CIMClassR_SUB)
        {
            var rsupDef = (CIMClassR_SUB)subRgo;
            var rsubsupDef = rsupDef.LinkedToR213();
            var relDef = rsubsupDef.CIMSuperClassR_REL();
            var targetObjDef = rsubsupDef.LinkedFromR212().CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            string targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
            string relVarName = GeneratorNames.GetRelLocalVariableName(relDef, targetObjDef, "");
#>
            if (<#= relVarName #> == null)
            {
                isValid = false;
            }
<#
        }
        else if (subRgo is CIMClassR_ASSR)
        {
            var rassrDef = (CIMClassR_ASSR)subRgo;
            var rassocDef = rassrDef.LinkedToR211();
            var relDef = rassocDef.CIMSuperClassR_REL();
            var raoneDef = rassocDef.LinkedFromR209();
            var raothDef = rassocDef.LinkedFromR210();

            var oneObjDef = raoneDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            var oneObjTypeName = GeneratorNames.GetDomainClassName(oneObjDef);
            var oneArgName = $"oneInstance{GeneratorNames.ToProgramAvailableString(raoneDef.Attr_Txt_Phrs)}";
            string relVarName = GeneratorNames.GetRelLocalVariableName(relDef, oneObjDef, raoneDef.Attr_Txt_Phrs);
#>
            if (<#= relVarName #> == null)
            {
                isValid = false;
            }
<#

            var otherObjDef = raothDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            var otherObjTypeName = GeneratorNames.GetDomainClassName(otherObjDef);
            var otherArgName = $"otherInstance{GeneratorNames.ToProgramAvailableString(raothDef.Attr_Txt_Phrs)}";
            relVarName = GeneratorNames.GetRelLocalVariableName(relDef, otherObjDef, raothDef.Attr_Txt_Phrs);
#>
            if (<#= relVarName #> == null)
            {
                isValid = false;
            }
<#
        }
    }

    foreach (var rto in joinedRtos)
    {
        var subRto = rto.SubClassR204();
        if (subRto is CIMClassR_PART)
        {
            var rpartDef = (CIMClassR_PART)subRto;
            var rsimpDef = rpartDef.LinkedToR207();
            var relDef = rsimpDef.CIMSuperClassR_REL();
            var rformDef = rsimpDef.LinkedFromR208();
            if (rformDef != null)
            {
                var targetObjDef = rformDef.CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
                string targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "", rformDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);

                if (rformDef.Attr_Mult == 0)
                {
                    if (rformDef.Attr_Cond == 0)
                    {
#>
            if (this.<#= methodNameLinked #>() == null)
            {
                isValid = false;
            }

<#
                    }
                }
                else
                {
                    if (rformDef.Attr_Cond == 0)
                    {
#>
            if (this.<#= methodNameLinked #>().Count() == 0)
            {
                isValid = false;
            }

<#
                    }
                }
            }
        }
        else if (subRto is CIMClassR_AONE)
        {
            var raoneDef = (CIMClassR_AONE)subRto;
            var rassocDef = raoneDef.LinkedToR209();
            var relDef = rassocDef.CIMSuperClassR_REL();
            var targetObjDef = rassocDef.LinkedFromR211().CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
            var raothDef = rassocDef.LinkedFromR210();
            string targetTypeName = GeneratorNames.GetDomainClassName(targetObjDef);
            string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "One", raothDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
            string condtion = GetRelCondition(rassocDef.LinkedFromR211().CIMSuperClassR_RGO(), targetTypeName, false);
            if (raothDef.Attr_Mult == 0)
            {
                if (raothDef.Attr_Cond == 0)
                {
#>
            if (this.<#= methodNameLinked #>() == null)
            {
                isValid = false;
            }

<#
                }
            }
            else
            {
                if (raothDef.Attr_Cond == 0)
                {
#>
            if (this.<#= methodNameLinked #>().Count() == 0)
            {
                isValid = false;
            }

<#
                }
            }
        }
        else if (subRto is CIMClassR_AOTH)
        {
            var raothDef = (CIMClassR_AOTH)subRto;
            var rassocDef = raothDef.LinkedToR210();
            var relDef = rassocDef.CIMSuperClassR_REL();
            var targetObjDef = rassocDef.LinkedFromR211().CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
            string targetType = GeneratorNames.GetDomainClassName(targetObjDef);
            var raoneDef = rassocDef.LinkedFromR209();
            string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "Other", raoneDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
            string condtion = GetRelCondition(rassocDef.LinkedFromR211().CIMSuperClassR_RGO(), targetType, false);
            if (raoneDef.Attr_Mult == 0)
            {
                if (raoneDef.Attr_Cond == 0)
                {
#>
            if (this.<#= methodNameLinked #>() == null)
            {
                isValid = false;
            }

<#
                }
            }
            else
            {
                if (raoneDef.Attr_Cond == 0)
                {
#>
            if (this.<#= methodNameLinked #>().Count() == 0)
            {
                isValid = false;
            }

<#
                }
            }
        }
        else if (subRto is CIMClassR_SUPER)
        {
            var superDef = (CIMClassR_SUPER)subRto;
            var subsupDef = superDef.LinkedToR212();
            var subsupRelDef = subsupDef.CIMSuperClassR_REL();
            var subClassIFName = GeneratorNames.GetSubRelInterfaceName(subsupRelDef);
            var subClassGetMethodName = GeneratorNames.GetSubRelClassMethodName(subsupRelDef);
#>
            if (this.<#= subClassGetMethodName #>() == null)
            {
                isValid = false;
            }
<#
        }
    }
    // string logDeleteAttrDefs = GetIdentityPropertiesArgsInFormattedString(objDef, "this");
    var logInstanceDelete = new logging.Logging("logger", "            ", objDef, "this", logging.Logging.Mode.InstanceLifeCycle, "delete");
    var logInstanceDeleteGen = logInstanceDelete.TransformText();
#>
            return isValid;
        }

        public void Dispose()
        {
<#= logInstanceDeleteGen #>
            instanceRepository.Delete(this);
        }
    }
}
