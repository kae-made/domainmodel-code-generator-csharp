<#
  // Copyright (c) Knowledge & Experience. All rights reserved.
  // Licensed under the MIT license. See LICENSE file in the project root for full license information.
#>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Kae.CIM.MetaModel.CIMofCIM" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : <#= version #>
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace <#= nameSpace #>
{
<#
    var domainClassName = GeneratorNames.GetDomainClassName(objDef);
    var domainBaseInterfaceName = GeneratorNames.GetDomainClassBaseInterfaceName();
    var subClassInterfaces = DomainClassDefs.GetSubClassInterfaces(objDef);
    var domainClassBaseName = GeneratorNames.GetDomainClassImplName(objDef);
    string stateMachineLocalVariableName = "stateMachine";
    string linkedInstanceClassName = GeneratorNames.GetLinkedInstanceClassName();

    string changedStateClassName = "";
    string changedStateVarName = "";
    GeneratorNames.GetChangedStoreVariable(ref changedStateClassName, ref changedStateVarName);

#>
    public partial class <#= domainClassBaseName #> : <#= domainClassName #>
    {
        protected static readonly string className = "<#= objDef.Attr_Key_Lett #>";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

<#
    bool hasStateMachine = false;
    var ismDef = objDef.LinkedFromR518();
    if (ismDef != null)
    {
        hasStateMachine = true;
    }

    var implAttrDefs = new List<AttributeDef>();
    var attrDefs = objDef.LinkedFromR102();
    foreach (var attrDef in attrDefs)
    {
        var implAttrDef = new AttributeDef() { AttrDef = attrDef, IsIdentity = false, IsReferential = false, IsUniqueId = false, IsState = false };
        var attrPropName = GeneratorNames.GetAttrPropertyName(attrDef);
        var dtDef = DomainDataTypeDefs.GetBaseDT(attrDef);
        var attrPropDataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
        implAttrDef.DataTypeName = attrPropDataTypeName;
        bool generate = true;
        if (hasStateMachine)
        {
            if (dtDef.Attr_Name == "state<State_Model>")
            {
                implAttrDef.IsState = true;
            }
        }

        var subAttrDef = attrDef.SubClassR106();
        if (subAttrDef is not CIMClassO_RATTR)
        {
            var oidaDefs = attrDef.LinkedOneSideR105();
            foreach (var oidaDef in oidaDefs)
            {
                var oidDef = oidaDef.LinkedOneSideR105();
                implAttrDef.IsIdentity = true;
                if (dtDef.Attr_Name == "unique_id")
                {
                    implAttrDef.IsUniqueId = true;
                }
            }
        }
        else
        {
            implAttrDef.IsReferential = true;
        }
        implAttrDefs.Add(implAttrDef);
    }
    // Constructor Gen
    string constructorArgs = "";
    foreach (var implAttrDef in implAttrDefs)
    {
        if (!implAttrDef.IsReferential)
        {
            if (!string.IsNullOrEmpty(constructorArgs))
            {
                constructorArgs += ", ";
            }
            constructorArgs += implAttrDef.AttrDef.Attr_Name;
        }
    }
    // Constructor Signature
    var logInstanceCreation = new logging.Logging("logger", "            ", objDef, "newInstance", logging.Logging.Mode.InstanceLifeCycle, "create");
    var logInstanceCreationGen = logInstanceCreation.TransformText();
#>
        public static <#= domainClassBaseName #> CreateInstance(InstanceRepository instanceRepository, Logger logger=null, <#= changedStateClassName #> <#= changedStateVarName #>=null)
        {
            var newInstance = new <#= domainClassBaseName #>(instanceRepository, logger);
<#= logInstanceCreationGen #>
            instanceRepository.Add(newInstance);

            if (<#= changedStateVarName #> !=null) <#= changedStateVarName #>.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public <#= domainClassBaseName #>(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
<#
    // Constructor Body
    foreach(var implAttrDef in implAttrDefs)
    {
        string propName = GeneratorNames.GetAttrPropertyName(implAttrDef.AttrDef);
        string propLocalName = GeneratorNames.GetAttrPropertyLocalName(implAttrDef.AttrDef);
        if (implAttrDef.IsIdentity && (implAttrDef.IsReferential == false))
        {
            if (implAttrDef.IsUniqueId)
            {
                var newGuid = Guid.NewGuid().ToString();
#>
            <#= propLocalName #> = Guid.NewGuid().ToString();
<#
            }
        }
        else
        {
            if (implAttrDef.IsState)
            {
                string stateMachineClassName = GeneratorNames.GetStateMachineClassName(objDef);
#>
            <#= stateMachineLocalVariableName #> = new <#= stateMachineClassName #>(this, instanceRepository, logger);
<#
            }
        }
    }
#>
        }
<#
    // attribute generation
    var propertiesGen = new ciclass.PropertyDef("        ", objDef, true, coloringManager);
    string propertiesGenCode = propertiesGen.TransformText();
#>
<#= propertiesGenCode #>

        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(<#= domainClassName #> instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
<#
    foreach(var implAttrDef in implAttrDefs)
    {
        var dtDef = DomainDataTypeDefs.GetBaseDT(implAttrDef.AttrDef);
        var attrPropDataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
        string propName = GeneratorNames.GetAttrPropertyName(implAttrDef.AttrDef);
        var attrDataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
        if (!implAttrDef.IsState)
        {
#>
                    case "<#= implAttrDef.AttrDef.Attr_Name #>":
                        if ((<#= attrPropDataTypeName #>)conditionPropertyValues[propertyName] != instance.<#= propName #>)
                        {
                            result = false;
                        }
                        break;
<#
        }
    }
#>                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }
<#
        var relationshipGenf = new ciclass.RelationshipDef("        ", objDef, true);
        string relationshipDef = relationshipGenf.TransformText();

#>
<#= relationshipDef #>

<#

    if (hasStateMachine)
    {
        string takeEventMethodName = GeneratorNames.GetTakeEventMethodName();
        string takeEventLogArgs = GetIdentityPropertiesArgsInFormattedString(objDef, "this");
#>
        public void <#= takeEventMethodName #>(EventData domainEvent, bool selfEvent=false)
        {
            if (selfEvent)
            {
                <#= stateMachineLocalVariableName #>.ReceivedSelfEvent(domainEvent).Wait();
            }
            else
            {
                <#= stateMachineLocalVariableName #>.ReceivedEvent(domainEvent).Wait();
            }
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:<#= objDef.Attr_Key_Lett #>(<#= takeEventLogArgs #>):takeEvent({domainEvent.EventNumber})");
        }

<#
    }

#>
        
        public bool Validate()
        {
            bool isValid = true;
<#
    var joinedRgos = DomainClassDefs.GetJoinedRGOs(objDef);
    foreach (var rgo in joinedRgos)
    {
        var subRgo = rgo.SubClassR205();
        if (subRgo is CIMClassR_FORM)
        {
            var rformDef = (CIMClassR_FORM)subRgo;
            var rsimpDef = rformDef.LinkedToR208();
            var relDef = rsimpDef.CIMSuperClassR_REL();
            var partDefs = rsimpDef.LinkedFromR207();
            if (partDefs.Count() > 0)
            {
                if (partDefs.Count() > 1)
                {
                    // TODO: ???
                }
                var partDef = partDefs.FirstOrDefault();
                var targetObjDef = partDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
                var targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                if (partDef.Attr_Mult == 0)
                {
                    string relVarName = GeneratorNames.GetRelLocalVariableName(relDef, targetObjDef, partDef.Attr_Txt_Phrs);
                    if (partDef.Attr_Cond==0)
                    {
#>
            if (<#= relVarName #> == null)
            {
                isValid = false;
            }
<#
                    }
                }
            }
        }
        else if (subRgo is CIMClassR_SUB)
        {
            var rsupDef = (CIMClassR_SUB)subRgo;
            var rsubsupDef = rsupDef.LinkedToR213();
            var relDef = rsubsupDef.CIMSuperClassR_REL();
            var targetObjDef = rsubsupDef.LinkedFromR212().CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            string targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
            string relVarName = GeneratorNames.GetRelLocalVariableName(relDef, targetObjDef, "");
#>
            if (<#= relVarName #> == null)
            {
                isValid = false;
            }
<#
        }
        else if (subRgo is CIMClassR_ASSR)
        {
            var rassrDef = (CIMClassR_ASSR)subRgo;
            var rassocDef = rassrDef.LinkedToR211();
            var relDef = rassocDef.CIMSuperClassR_REL();
            var raoneDef = rassocDef.LinkedFromR209();
            var raothDef = rassocDef.LinkedFromR210();

            var oneObjDef = raoneDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            var oneObjTypeName = GeneratorNames.GetDomainClassName(oneObjDef);
            var oneArgName = $"oneInstance{GeneratorNames.ToProgramAvailableString(raoneDef.Attr_Txt_Phrs)}";
            string relVarName = GeneratorNames.GetRelLocalVariableName(relDef, oneObjDef, raoneDef.Attr_Txt_Phrs);
#>
            if (<#= relVarName #> == null)
            {
                isValid = false;
            }
<#

            var otherObjDef = raothDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            var otherObjTypeName = GeneratorNames.GetDomainClassName(otherObjDef);
            var otherArgName = $"otherInstance{GeneratorNames.ToProgramAvailableString(raothDef.Attr_Txt_Phrs)}";
            relVarName = GeneratorNames.GetRelLocalVariableName(relDef, otherObjDef, raothDef.Attr_Txt_Phrs);
#>
            if (<#= relVarName #> == null)
            {
                isValid = false;
            }
<#
        }
    }

    var joinedRtos = DomainClassDefs.GetJoinedRTOs(objDef);
    foreach (var rto in joinedRtos)
    {
        var subRto = rto.SubClassR204();
        if (subRto is CIMClassR_PART)
        {
            var rpartDef = (CIMClassR_PART)subRto;
            var rsimpDef = rpartDef.LinkedToR207();
            var relDef = rsimpDef.CIMSuperClassR_REL();
            var rformDef = rsimpDef.LinkedFromR208();
            if (rformDef != null)
            {
                var targetObjDef = rformDef.CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
                string targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "", rformDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);

                if (rformDef.Attr_Mult == 0)
                {
                    if (rformDef.Attr_Cond == 0)
                    {
#>
            if (this.<#= methodNameLinked #>() == null)
            {
                isValid = false;
            }

<#
                    }
                }
                else
                {
                    if (rformDef.Attr_Cond == 0)
                    {
#>
            if (this.<#= methodNameLinked #>().Count() == 0)
            {
                isValid = false;
            }

<#
                    }
                }
            }
        }
        else if (subRto is CIMClassR_AONE)
        {
            var raoneDef = (CIMClassR_AONE)subRto;
            var rassocDef = raoneDef.LinkedToR209();
            var relDef = rassocDef.CIMSuperClassR_REL();
            var targetObjDef = rassocDef.LinkedFromR211().CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
            var raothDef = rassocDef.LinkedFromR210();
            string targetTypeName = GeneratorNames.GetDomainClassName(targetObjDef);
            string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "Other", raothDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
            string condtion = GetRelCondition(rassocDef.LinkedFromR211().CIMSuperClassR_RGO(), targetTypeName, false);
            if (raothDef.Attr_Mult == 0)
            {
                if (raothDef.Attr_Cond == 0)
                {
#>
            if (this.<#= methodNameLinked #>() == null)
            {
                isValid = false;
            }

<#
                }
            }
            else
            {
                if (raothDef.Attr_Cond == 0)
                {
#>
            if (this.<#= methodNameLinked #>().Count() == 0)
            {
                isValid = false;
            }

<#
                }
            }
        }
        else if (subRto is CIMClassR_AOTH)
        {
            var raothDef = (CIMClassR_AOTH)subRto;
            var rassocDef = raothDef.LinkedToR210();
            var relDef = rassocDef.CIMSuperClassR_REL();
            var targetObjDef = rassocDef.LinkedFromR211().CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
            string targetType = GeneratorNames.GetDomainClassName(targetObjDef);
            var raoneDef = rassocDef.LinkedFromR209();
            string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "One", raoneDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
            string condtion = GetRelCondition(rassocDef.LinkedFromR211().CIMSuperClassR_RGO(), targetType, false);
            if (raoneDef.Attr_Mult == 0)
            {
                if (raoneDef.Attr_Cond == 0)
                {
#>
            if (this.<#= methodNameLinked #>() == null)
            {
                isValid = false;
            }

<#
                }
            }
            else
            {
                if (raoneDef.Attr_Cond == 0)
                {
#>
            if (this.<#= methodNameLinked #>().Count() == 0)
            {
                isValid = false;
            }

<#
                }
            }
        }
        else if (subRto is CIMClassR_SUPER)
        {
            var superDef = (CIMClassR_SUPER)subRto;
            var subsupDef = superDef.LinkedToR212();
            var subsupRelDef = subsupDef.CIMSuperClassR_REL();
            var subClassIFName = GeneratorNames.GetSubRelInterfaceName(subsupRelDef);
            var subClassGetMethodName = GeneratorNames.GetSubRelClassMethodName(subsupRelDef);
#>
            if (this.<#= subClassGetMethodName #>() == null)
            {
                isValid = false;
            }
<#
        }
    }
    // string logDeleteAttrDefs = GetIdentityPropertiesArgsInFormattedString(objDef, "this");
    var logInstanceDelete = new logging.Logging("logger", "            ", objDef, "this", logging.Logging.Mode.InstanceLifeCycle, "delete");
    var logInstanceDeleteGen = logInstanceDelete.TransformText();
#>
            return isValid;
        }

        public void DeleteInstance(<#= changedStateClassName #> <#= changedStateVarName #>=null)
        {
<#= logInstanceDeleteGen #>
            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
<#
    foreach (var implAttrDef in implAttrDefs)
    {
        var attrDef = implAttrDef.AttrDef;
        var dtDef = DomainDataTypeDefs.GetBaseDT(attrDef);
        string dataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
        string localPropVarName = GeneratorNames.GetAttrPropertyLocalName(attrDef);
        string stateOfPropVarName = GeneratorNames.GetPropertyStateVariableName(attrDef);
        if (implAttrDef.IsState)
        {
#>
            <#= stateMachineLocalVariableName #>.ForceUpdateState((int)propertyValues["<#= attrDef.Attr_Name #>"]);
<#
        }
        else
        {
#>
            <#= localPropVarName #> = (<#= dataTypeName #>)propertyValues["<#= attrDef.Attr_Name #>"];
            <#= stateOfPropVarName #> = false;
<#
        }
    }

#>
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
<#
    foreach (var implAttrDef in implAttrDefs)
    {
        var attrDef = implAttrDef.AttrDef;
        var dtDef = DomainDataTypeDefs.GetBaseDT(attrDef);
        string dataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
        string localPropVarName = GeneratorNames.GetAttrPropertyLocalName(attrDef);
        string stateOfPropVarName = GeneratorNames.GetPropertyStateVariableName(attrDef);
        if (implAttrDef.IsState)
        {
#>
            results.Add("<#= attrDef.Attr_Name #>", <#= stateMachineLocalVariableName #>.CurrentState);

<#
        }
        else
        {
#>
            if (<#= stateOfPropVarName #>)
            {
                results.Add("<#= attrDef.Attr_Name #>", <#= localPropVarName #>);
                <#= stateOfPropVarName #> = false;
            }
<#
        }
    }

#>

            return results;
        }

        public string GetIdentities()
        {
            string identities = $"<#
        bool first = true;
        var oidDefs = objDef.LinkedFromR104();
        foreach(var oidDef in oidDefs)
        {
            if (oidDef.Attr_Oid_ID == 0)
            {
                var oidaDefs = oidDef.LinkedOtherSideR105();
                foreach (var oidaDef in oidaDefs)
                {
                    var attrDef = oidaDef.LinkedOtherSideR105();
                    string propName = GeneratorNames.GetAttrPropertyName(attrDef);
                    if (first == false) { #>,<# } #><#= attrDef.Attr_Name #>={this.<#= propName #>}<#
                    first = false;
                }
            }
        }
#>";

            return identities;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

<#
    foreach (var implAttrDef in implAttrDefs)
    {
        var attrDef = implAttrDef.AttrDef;
        var dtDef = DomainDataTypeDefs.GetBaseDT(attrDef);
        string dataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
        string localPropVarName = GeneratorNames.GetAttrPropertyLocalName(attrDef);
        string stateOfPropVarName = GeneratorNames.GetPropertyStateVariableName(attrDef);
        if (implAttrDef.IsState)
        {
#>
            results.Add("<#= attrDef.Attr_Name #>", <#= stateMachineLocalVariableName #>.CurrentState);
<#
        }
        else
        {
            if (implAttrDef.IsIdentity)
            {
#>
            results.Add("<#= attrDef.Attr_Name #>", <#= localPropVarName #>);
<#
            }
            else
            {
#>
            if (!onlyIdentity) results.Add("<#= attrDef.Attr_Name #>", <#= localPropVarName #>);
<#
            }
        }
    }

#>

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
