<#
  // Copyright (c) Knowledge & Experience. All rights reserved.
  // Licensed under the MIT license. See LICENSE file in the project root for full license information.
#>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Kae.CIM.MetaModel.CIMofCIM" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : <#= version #>
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace <#= nameSpace #>
{
<#
    string stateMachineClassName = GeneratorNames.GetStateMachineClassName(objDef);
    string domainClassName = GeneratorNames.GetDomainClassName(objDef);
    // string logThisArgs = DomainClassBase.GetIdentityPropertiesArgsInFormattedString(objDef, "target");

    string changedStateClassName = "";
    string changedStateVarName = "";
    GeneratorNames.GetChangedStoreVariable(ref changedStateClassName, ref changedStateVarName);
#>
    public partial class <#= stateMachineClassName #> : StateMachineBase, ITransition
    {
<#
    var stateDefs = smDef.LinkedFromR501();
    var evtDefs = smDef.LinkedFromR502();

    int index = 0;

    evtDefs = evtDefs.OrderBy(e => e.Attr_Numb);
#>
        public enum Events
        {
<#
    foreach (var evtDef in evtDefs)
    {
        var evtName = GeneratorNames.GetEventEnumLabelName(objDef, evtDef);
        var comment = $"// {evtDef.Attr_Mning}";
#>
            <#= evtName #> = <#= index #><# if (++index < evtDefs.Count()) { #>, <# } #>    <#= comment #>
<#
    }
#>
        }

<#

    stateDefs = stateDefs.OrderBy(s => s.Attr_Numb);
    index = 0;
#>
        public enum States
        {
            _NoState_ = 0,
<#
    foreach (var stateDef in stateDefs)
    {
        var stateName = GeneratorNames.GetStateEnumLabelName(stateDef);
        
#>
            <#= stateName #> = <#= ++index #><# if (index < stateDefs.Count()) { #>,<# } #>

<#
    }
#>
        }

<#
    var definedEventArgIFs = new List<string>();
    foreach(var evtDef in evtDefs)
    {
        bool definedEvent = false;
        string argIFName = GetEventArgsInterfaceName(evtDef, ref definedEvent);
        if (definedEvent)
        {
            if (!definedEventArgIFs.Contains(argIFName))
            {
                definedEventArgIFs.Add(argIFName);
#>
        private interface <#= argIFName #>
        {
<#
        var evtdiDefs = evtDef.LinkedFromR532();
        foreach (var evtdiDef in evtdiDefs)
        {
            var evtdiName = evtdiDef.Attr_Name;
            var dtDef = evtdiDef.LinkedToR524();
            var dataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
#>
            public <#= dataTypeName #> <#= evtdiName #> { get; set; }
<#
        }
#>
        }
<#
            }
        }
    }


    bool hasCreationEvent = false;
    foreach(var evtDef in evtDefs)
    {
        var evtClassName = GeneratorNames.GetEventClassName(objDef, evtDef);
        var evtName = GeneratorNames.GetEventEnumLabelName(objDef, evtDef);
        bool existArgIF = false;
        string argIFName = GetEventArgsInterfaceName(evtDef, ref existArgIF);
#>
        public class <#= evtClassName #> : EventData<# if (existArgIF) { #>, <#= argIFName #><# } #>

        {
            <#= domainClassName #> reciever;

            public <#= evtClassName #>(<#= domainClassName #> reciever) : base("<#= evtClassName #>", (int)Events.<#= evtName #>)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

<#
        var subEvtDef = evtDef.SubClassR525();
        if (subEvtDef is CIMClassSM_SEVT)
        {
            var sevtDef = (CIMClassSM_SEVT)subEvtDef;
            var subSevtDef = sevtDef.SubClassR526();
            if (subSevtDef is CIMClassSM_NLEVT)
            {
                var nlevtDef = (CIMClassSM_NLEVT)subSevtDef;
                var pevtDef = nlevtDef.LinkedToR527();
                
            }
            else if (subSevtDef is CIMClassSM_LEVT)
            {
                var levtDef = (CIMClassSM_LEVT)subSevtDef;
                var crtxnDef = levtDef.LinkedFromR509();
                if (crtxnDef != null)
                {
                    var creationStateDef = crtxnDef.CIMSuperClassSM_TXN().LinkedToR506();
                    string creationStateName = GeneratorNames.GetStateEnumLabelName(creationStateDef);
                    hasCreationEvent = true;
                }
            }
        }
        else if (subEvtDef is CIMClassSM_PEVT)
        {

        }

        bool isCreationEvent = IsCreationEvent(evtDef);
        var evtdiDefs = evtDef.LinkedFromR532();
        if (subEvtDef is CIMClassSM_SEVT)
        {
            var sevtDef = (CIMClassSM_SEVT)subEvtDef;
            var subSevtDef = sevtDef.SubClassR526();
            if (subSevtDef is CIMClassSM_NLEVT)
            {
                var nlevtDef = (CIMClassSM_NLEVT)subSevtDef;
                var pevtDef = nlevtDef.LinkedToR527();
                var origEvtDef = pevtDef.CIMSuperClassSM_EVT();
                evtdiDefs = origEvtDef.LinkedFromR532();
            }            
        }
        var createArgs = "";
        var constructorCallArgs = "";
        foreach (var evtdiDef in evtdiDefs)
        {
            var evtdiName = evtdiDef.Attr_Name;
            var dtDef = evtdiDef.LinkedToR524();
            var dataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
            if (!string.IsNullOrEmpty(constructorCallArgs))
            {
                constructorCallArgs += ", ";
            }
            createArgs += $", {dataTypeName} {evtdiName}";
            constructorCallArgs += $"{evtdiName} = {evtdiName}";
#>
            public <#= dataTypeName #> <#= evtdiName #> { get; set; }
<#
        }
        if (!string.IsNullOrEmpty(constructorCallArgs))
        {
            constructorCallArgs = " { " + constructorCallArgs + " }";
        }
        string domainClassBaseName = GeneratorNames.GetDomainClassImplName(objDef);
#>
            // Create and send instance of <#= evtClassName #>
            public static EventData Create(<#= domainClassName #> receiver<#= createArgs #>, bool isSelfEvent, bool sendNow<# if (isCreationEvent) { #>, InstanceRepository instanceRepository, Logger logger<# } #>)
            {
<#
        if (subEvtDef is CIMClassSM_PEVT)
        {
#>
                EventData newEvent = null;
<#
        }
        else
        {
#>
                var newEvent = new <#= evtClassName #>(receiver)<#= constructorCallArgs #>;
<#
        }
        if (isCreationEvent)
        {
#>
                if (receiver == null && instanceRepository != null)
                {
                    receiver = <#= domainClassBaseName #>.CreateInstance(instanceRepository, logger);
                }
                if (sendNow)
                {
                    receiver.TakeEvent(newEvent);
                }
<#
        }
        else
        {
#>
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent, isSelfEvent);
                    }
                }
                else
                {
                    if (sendNow)
                    {
                        newEvent = null;
                    }
                }
<#
        }
#>

                return newEvent;
            }

            public override string GetReceiverIdentities()
            {
                string identiteis = "";
                if (this.reciever != null)
                {
                    identiteis = this.reciever.GetIdForExternalStorage();
                }
                return identiteis;
            }

            public override IDictionary<string, object> GetSupplementalData()
            {
                var supplementalData = new Dictionary<string, object>();

<#
        foreach (var evtdiDef in evtdiDefs)
        {
            var evtdiName = evtdiDef.Attr_Name;
            var dtDef = evtdiDef.LinkedToR524();
            var dataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
#>
                supplementalData.Add("<#= evtdiName #>", <#= evtdiName #>);
<#
        }
#>

                return supplementalData;
            }
        }

<#
    }

#>
        protected <#= domainClassName #> target;

        protected InstanceRepository instanceRepository;

        protected string DomainName { get { return target.DomainName; } }

        // Constructor
<#
    if (hasCreationEvent)
    {
#>
        public <#= stateMachineClassName #>(<#= domainClassName #> target, bool synchronousMode, InstanceRepository instanceRepository, Logger logger) : base(0, synchronousMode, logger)
<#
    }
    else
    {
#>
        public <#= stateMachineClassName #>(<#= domainClassName #> target, bool synchronousMode, InstanceRepository instanceRepository, Logger logger) : base(1, synchronousMode, logger)
<#
    }
#>
        {
            this.target = target;
            this.stateTransition = this;
            this.logger = logger;
            this.instanceRepository = instanceRepository;
        }

<#
    var stateTransferTableDef = new List<StateTransfersEntry>();
    foreach (var stateDef in stateDefs)
    {
        var semeDefs = stateDef.LinkedOtherSideR503();
        var nextTransitions = new List<NexTransition>();
        foreach(var semeDef in semeDefs)
        {
            var triggerEvtDef = semeDef.LinkedOtherSideR503().CIMSuperClassSM_EVT();
            var subSemeDef = semeDef.SubClassR504();
            var nextTransition = new NexTransition() { EvtDef = triggerEvtDef, EventNumber=triggerEvtDef.Attr_Numb, NextStateDef = null, IsCantHappen = false, IsIgnore = false };
            if (subSemeDef is CIMClassSM_NSTXN)
            {
                var netxnDef = (CIMClassSM_NSTXN)subSemeDef;
                var nextStateDef = netxnDef.CIMSuperClassSM_TXN().LinkedToR506();
                nextTransition.NextStateDef = nextStateDef;
            }
            else if (subSemeDef is CIMClassSM_EIGN)
            {
                nextTransition.IsIgnore= true;
            }
            else if (subSemeDef is CIMClassSM_CH)
            {
                nextTransition.IsCantHappen = true;
            }
            nextTransitions.Add(nextTransition);
        }
        var nextTxns = nextTransitions.OrderBy(nxt => (nxt.EventNumber));
        var sttEntry = new StateTransfersEntry() { StateDef = stateDef, StateNumber = stateDef.Attr_Numb, NexTransitions = nextTxns };
        stateTransferTableDef.Add(sttEntry);
    }

    if (stateTransferTableDef.Count > 0)
    {
        int sttColumns = stateTransferTableDef[0].NexTransitions.Count();
        int sttRows = stateTransferTableDef.Count;
#>
        protected int[,] stateTransitionTable = new int[<#= sttRows #>, <#= sttColumns #>]
            {
<#
        var sttDef = stateTransferTableDef.OrderBy(entry => entry.StateNumber);
        index = 0;
        foreach(var sttEntry in sttDef)
        {
            string sttRowDef = "";
            foreach(var nt in sttEntry.NexTransitions)
            {
                if (!string.IsNullOrEmpty(sttRowDef))
                {
                    sttRowDef += ", ";
                }
                string nextState = "";
                 if (nt.NextStateDef != null)
                 {
                     nextState = $"States.{GeneratorNames.ToProgramAvailableString(nt.NextStateDef.Attr_Name)}";
                 }
                 else
                 {
                     if (nt.IsIgnore)
                     {
                         nextState = "ITransition.Transition.Ignore";
                     }
                     else if (nt.IsCantHappen)
                     {
                         nextState = "ITransition.Transition.CantHappen";
                     }
                 }
                 sttRowDef += $"(int){nextState}";
             }
#>
                { <#= sttRowDef #> }<# if (++index < stateTransferTableDef.Count()) { #>, <# } #>

<#
        }
#>
            };

<#
    }
    else
    {
#>
        protected int[,] stateTransitionTable = null;

<#
    }
    var logSttTxn0 = new logging.Logging("logger", "            ", objDef, "target", logging.Logging.Mode.StatTransition, "entering");
    var logSttTxnE0Gen = logSttTxn0.TransformText();
    var logSttTxn1 = new logging.Logging("logger", "            ", objDef, "target", logging.Logging.Mode.StatTransition, "entered");
    var logSttTxnE1Gen = logSttTxn1.TransformText();
#>
        public int GetNextState(int currentState, int eventNumber)
        {
            return stateTransitionTable[currentState, eventNumber];
        }

        private List<ChangedState> changedStates;

        protected override void RunEntryAction(int nextState, EventData eventData)
        {
<#= logSttTxnE0Gen #>

            changedStates = new List<ChangedState>();

            switch (nextState)
            {
<#
    foreach (var stateDef in stateDefs)
    {
        var stateMethodName = GeneratorNames.GetStateActionMethodName(stateDef);
        var stateLabelName = GeneratorNames.GetStateEnumLabelName(stateDef);
#>
            case (int)States.<#= stateLabelName #>:
<#
        bool ifDefined = false;
        string argsIfName = "";
        var triggerEvtDef = GetEventArgsInterfaceNameForTheState(stateDef,ref argsIfName, ref ifDefined);
        string actionArgs = "";
        if (ifDefined)
        {
            var evtdiDefs = triggerEvtDef.LinkedFromR532();
            foreach (var evtdiDef in evtdiDefs)
            {
                var argName = evtdiDef.Attr_Name;
                var argDtDef = evtdiDef.LinkedToR524();
                var argTypeName = DomainDataTypeDefs.GetDataTypeName(argDtDef);
                if (!string.IsNullOrEmpty(actionArgs))
                {
                    actionArgs += ", ";
                }
                actionArgs += $"(({argsIfName})eventData).{argName}";
            }
        }
#>
                <#= stateMethodName #>(<#= actionArgs #>);
                break;
<#
    }
#>
            }
<#= logSttTxnE1Gen #>

            instanceRepository.SyncChangedStates(changedStates);
        }
    }
}
