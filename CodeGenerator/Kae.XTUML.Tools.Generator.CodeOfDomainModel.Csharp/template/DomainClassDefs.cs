// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 17.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp.template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Kae.CIM.MetaModel.CIMofCIM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class DomainClassDefs : DomainClassDefsBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// ------------------------------------------------------------------------------" +
                    "\r\n// <auto-generated>\r\n//     This file is generated by tool.\r\n//     Runtime Ve" +
                    "rsion : ");
            
            #line 10 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(version));
            
            #line default
            #line hidden
            this.Write(@"
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Kae.StateMachine;

");
            
            #line 20 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

    var domainBaseInterfaceName = GeneratorNames.GetDomainClassBaseInterfaceName();

            
            #line default
            #line hidden
            this.Write("namespace ");
            
            #line 23 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nameSpace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public interface ");
            
            #line 25 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainBaseInterfaceName));
            
            #line default
            #line hidden
            this.Write(" : IDisposable\r\n    {\r\n        public string ClassName { get; }\r\n        /// <sum" +
                    "mary>\r\n        /// Check attributes and links are valid or not.\r\n        /// </s" +
                    "ummary>\r\n        /// <returns></returns>\r\n        bool Validate();     \r\n    }\r\n" +
                    "");
            
            #line 34 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

    foreach (var classObjDef in classObjDefs)
    {
        var objDef = (CIMClassO_OBJ)classObjDef;
        var domainClassName = GeneratorNames.GetDomainClassName(objDef);
        var subClassInterfaces = GetSubClassInterfaces(objDef);

        bool hasStateMachine = false;
        var ismDef = objDef.LinkedFromR518();
        if (ismDef != null)
        {
            hasStateMachine = true;
        }

            
            #line default
            #line hidden
            this.Write("\r\n    public interface ");
            
            #line 49 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 49 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainBaseInterfaceName));
            
            #line default
            #line hidden
            
            #line 49 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
 if (!string.IsNullOrEmpty(subClassInterfaces)) { 
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 49 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(subClassInterfaces));
            
            #line default
            #line hidden
            
            #line 49 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 52 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

        bool written = false;
        var attrDefs = objDef.LinkedFromR102();
        foreach(var attrDef in attrDefs)
        {
            var attrPropName = GeneratorNames.GetAttrPropertyName(attrDef);
            var dtDef = DomainDataTypeDefs.GetBaseDT(attrDef);
            var attrPropDataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
            bool generate = true;
            bool isStateAttr = false;
            if (hasStateMachine)
            {
                if (dtDef.Attr_Name == "state<State_Model>")
                {
                    isStateAttr = true;
                }
            }

            if (generate)
            {
                written = true;
                string accessors = "get;";
                var subAttrDef = attrDef.SubClassR106();
                if (subAttrDef is not CIMClassO_RATTR)
                {
                    bool isIdentity = false;
                    var oidaDefs = attrDef.LinkedOneSideR105();
                    foreach(var oidaDef in oidaDefs)
                    {
                        var oidDef = oidaDef.LinkedOneSideR105();
                        isIdentity = true;
                    }
                    if (isIdentity == false && isStateAttr == false)
                    {
                        accessors += " set;";
                    }
                }

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 90 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrPropDataTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 90 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrPropName));
            
            #line default
            #line hidden
            this.Write(" { ");
            
            #line 90 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(accessors));
            
            #line default
            #line hidden
            this.Write(" }\r\n");
            
            #line 91 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"


            }

        }

        if (written)
        {
            written = false;

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 102 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

        }
        if (hasStateMachine)
        {
            string takeEventMethodName = GeneratorNames.GetTakeEventMethodName();

            
            #line default
            #line hidden
            this.Write("        void ");
            
            #line 108 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(takeEventMethodName));
            
            #line default
            #line hidden
            this.Write("(EventData domainEvent);\r\n\r\n");
            
            #line 110 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

        }

        var joinedRgos = GetJoinedRGOs(objDef);
        foreach(var rgo in joinedRgos)
        {
            var subRgo = rgo.SubClassR205();
            if (subRgo is CIMClassR_FORM)
            {
                var rformDef = (CIMClassR_FORM)subRgo;
                var rsimpDef = rformDef.LinkedToR208();
                var relDef = rsimpDef.CIMSuperClassR_REL();
                var partDefs = rsimpDef.LinkedFromR207();
                if (partDefs.Count() > 0)
                {
                    if (partDefs.Count() > 1)
                    {
                        // TODO: ???
                    }
                    var partDef = partDefs.First();
                    string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "", partDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
                    var targetObjDef = partDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
                    var targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                    string returnType = "";
                    if (partDef.Attr_Mult == 0)
                    {
                        returnType = targetClassName;
                        string methodNameLink = GeneratorNames.GetRelationshipMethodName(relDef, "", partDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Link);
                        string methodNameUnLink = GeneratorNames.GetRelationshipMethodName(relDef, "", partDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Unlink);

            
            #line default
            #line hidden
            this.Write("        bool ");
            
            #line 140 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLink));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 140 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(targetClassName));
            
            #line default
            #line hidden
            this.Write(" instance);\r\n        bool ");
            
            #line 141 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameUnLink));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 141 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(targetClassName));
            
            #line default
            #line hidden
            this.Write(" instance);\r\n");
            
            #line 142 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

                    }
                    else
                    {
                        returnType = $"IEnumerable<{targetClassName}>";
                    }

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 149 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 149 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLinked));
            
            #line default
            #line hidden
            this.Write("();\r\n\r\n");
            
            #line 151 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

                    written = true;
                }
            }
            else if (subRgo is CIMClassR_SUB)
            {
                var rsupDef = (CIMClassR_SUB)subRgo;
                var rsubsupDef = rsupDef.LinkedToR213();
                var relDef = rsubsupDef.CIMSuperClassR_REL();
                string methodNameLink = GeneratorNames.GetRelationshipMethodName(relDef, "", "", GeneratorNames.RelLinkMethodType.Link);
                string methodNameUnlink = GeneratorNames.GetRelationshipMethodName(relDef, "", "", GeneratorNames.RelLinkMethodType.Unlink);
                var targetObjDef = rsubsupDef.LinkedFromR212().CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
                string targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                string methodNameLinked = GeneratorNames.GetSuperTypeMethodName(rsubsupDef);

            
            #line default
            #line hidden
            this.Write("//        ");
            
            #line 166 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(targetClassName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 166 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLinked));
            
            #line default
            #line hidden
            this.Write("();\r\n        bool ");
            
            #line 167 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLink));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 167 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(targetClassName));
            
            #line default
            #line hidden
            this.Write(" instance);\r\n        bool ");
            
            #line 168 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameUnlink));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 168 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(targetClassName));
            
            #line default
            #line hidden
            this.Write(" instance);\r\n\r\n");
            
            #line 170 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

            }
            else if (subRgo is CIMClassR_ASSR)
            {
                var rassrDef = (CIMClassR_ASSR)subRgo;
                var rassocDef = rassrDef.LinkedToR211();
                var relDef = rassocDef.CIMSuperClassR_REL();
                var raoneDef = rassocDef.LinkedFromR209();
                var raothDef = rassocDef.LinkedFromR210();
                string methodNameLink = GeneratorNames.GetRelationshipMethodName(relDef, "", "", GeneratorNames.RelLinkMethodType.Link);
                string methodNameUnlink = GeneratorNames.GetRelationshipMethodName(relDef, "", "", GeneratorNames.RelLinkMethodType.Unlink);

                string methodNameLinkedOne = GeneratorNames.GetRelationshipMethodName(relDef, "One", raoneDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
                var oneObjDef = raoneDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
                var oneObjTypeName = GeneratorNames.GetDomainClassName(oneObjDef);
                var oneArgName = $"oneInstance{GeneratorNames.ToProgramAvailableString(raoneDef.Attr_Txt_Phrs)}";

                string methodNameLinkedOther = GeneratorNames.GetRelationshipMethodName(relDef, "Other", raothDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
                var otherObjDef = raothDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
                var otherObjTypeName = GeneratorNames.GetDomainClassName(otherObjDef);
                var otherArgName = $"otherInstance{GeneratorNames.ToProgramAvailableString(raothDef.Attr_Txt_Phrs)}";

            
            #line default
            #line hidden
            this.Write("        bool ");
            
            #line 192 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLink));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 192 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(oneObjTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 192 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(oneArgName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 192 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(otherObjTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 192 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(otherArgName));
            
            #line default
            #line hidden
            this.Write(");\r\n        bool ");
            
            #line 193 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameUnlink));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 193 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(oneObjTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 193 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(oneArgName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 193 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(otherObjTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 193 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(otherArgName));
            
            #line default
            #line hidden
            this.Write(");\r\n        ");
            
            #line 194 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(oneObjTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 194 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLinkedOne));
            
            #line default
            #line hidden
            this.Write("();\r\n        ");
            
            #line 195 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(otherObjTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 195 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLinkedOther));
            
            #line default
            #line hidden
            this.Write("();\r\n\r\n");
            
            #line 197 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

            }
        }

        var joinedRtos = GetJoinedRTOs(objDef);
        foreach(var rto in joinedRtos)
        {
            var subRto = rto.SubClassR204();
            if (subRto is CIMClassR_PART)
            {
                var rpartDef = (CIMClassR_PART)subRto;
                var rsimpDef = rpartDef.LinkedToR207();
                var relDef = rsimpDef.CIMSuperClassR_REL();
                var rformDef = rsimpDef.LinkedFromR208();
                if (rformDef != null)
                {
                    var targetObjDef = rformDef.CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
                    string targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                    string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "", rformDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
                    string returnType = "";
                    if (rformDef.Attr_Mult == 0)
                    {
                        returnType = targetClassName;
                    }
                    else
                    {
                        returnType = $"IEnumerable<{targetClassName}>";
                    }

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 226 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 226 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLinked));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 227 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

                }
            }
            else if (subRto is CIMClassR_AONE)
            {
                var raoneDef = (CIMClassR_AONE)subRto;
                var rassocDef = raoneDef.LinkedToR209();
                var relDef = rassocDef.CIMSuperClassR_REL();
                var targetObjDef = rassocDef.LinkedFromR211().CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
                var raothDef = rassocDef.LinkedFromR210();
                string targetTypeName = GeneratorNames.GetDomainClassName(targetObjDef);
                string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef,"One",raothDef.Attr_Txt_Phrs,GeneratorNames.RelLinkMethodType.Linked);
                string returnType = "";
                if (raothDef.Attr_Mult == 0)
                {
                    returnType = targetTypeName;
                }
                else
                {
                    returnType = $"IEnumerable<{targetTypeName}>";
                }

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 249 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 249 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLinked));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 250 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

            }
            else if (subRto is CIMClassR_AOTH)
            {
                var raothDef = (CIMClassR_AOTH)subRto;
                var rassocDef = raothDef.LinkedToR210();
                var relDef = rassocDef.CIMSuperClassR_REL();
                var targetObjDef = rassocDef.LinkedFromR211().CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
                string targetType = GeneratorNames.GetDomainClassName(targetObjDef);
                var raoneDef = rassocDef.LinkedFromR209();
                string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "Other", raoneDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
                string returnType = "";
                if (raoneDef.Attr_Mult == 0)
                {
                    returnType = targetType;
                }
                else
                {
                    returnType = $"IEnumerable<{targetType}>";
                }

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 271 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 271 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLinked));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 272 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

            }
            else if (subRto is CIMClassR_SUPER)
            {
                var superDef = (CIMClassR_SUPER)subRto;
                var subsupRelDef = superDef.LinkedToR212().CIMSuperClassR_REL();
                var subClassIFName = GeneratorNames.GetSubRelInterfaceName(subsupRelDef);
                var subClassGetMethodName = GeneratorNames.GetSubRelClassMethodName(subsupRelDef);

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 281 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(subClassIFName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 281 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(subClassGetMethodName));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 282 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

            }
        }

        var tfrDefs = objDef.LinkedFromR115();
        foreach (var tfrDef in tfrDefs)
        {
            string opName = GeneratorNames.GetTfrOpName(tfrDef);
            var retDtDef = tfrDef.LinkedToR116();
            var retTypeName = DomainDataTypeDefs.GetDataTypeName(retDtDef);
            var tparmDefs = tfrDef.LinkedFromR117();
            string args = "";
            foreach(var tparmDef in tparmDefs)
            {
                var paramTypeDef = tparmDef.LinkedToR118();
                string paramTypeName = DomainDataTypeDefs.GetDataTypeName(paramTypeDef);
                string frag = $"{paramTypeName} {tparmDef.Attr_Name}";
                if (!string.IsNullOrEmpty(args))
                {
                    args += $", ";
                }
                args += $"{frag}";
            }

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 306 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(retTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 306 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(opName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 306 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(args));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 307 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

        }

            
            #line default
            #line hidden
            this.Write("    }\r\n");
            
            #line 311 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassDefs.tt"

    }

            
            #line default
            #line hidden
            this.Write("}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class DomainClassDefsBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
