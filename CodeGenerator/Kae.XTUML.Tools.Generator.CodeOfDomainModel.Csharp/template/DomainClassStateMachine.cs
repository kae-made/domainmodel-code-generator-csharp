// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 17.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp.template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Kae.CIM.MetaModel.CIMofCIM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class DomainClassStateMachine : DomainClassStateMachineBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 1 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

  // Copyright (c) Knowledge & Experience. All rights reserved.
  // Licensed under the MIT license. See LICENSE file in the project root for full license information.

            
            #line default
            #line hidden
            this.Write("// ------------------------------------------------------------------------------" +
                    "\r\n// <auto-generated>\r\n//     This file is generated by tool.\r\n//     Runtime Ve" +
                    "rsion : ");
            
            #line 14 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(version));
            
            #line default
            #line hidden
            this.Write(@"
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace ");
            
            #line 27 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nameSpace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 29 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    string stateMachineClassName = GeneratorNames.GetStateMachineClassName(objDef);
    string domainClassName = GeneratorNames.GetDomainClassName(objDef);
    // string logThisArgs = DomainClassBase.GetIdentityPropertiesArgsInFormattedString(objDef, "target");

    string changedStateClassName = "";
    string changedStateVarName = "";
    GeneratorNames.GetChangedStoreVariable(ref changedStateClassName, ref changedStateVarName);

            
            #line default
            #line hidden
            this.Write("    public partial class ");
            
            #line 38 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineClassName));
            
            #line default
            #line hidden
            this.Write(" : StateMachineBase, ITransition\r\n    {\r\n");
            
            #line 40 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    var stateDefs = smDef.LinkedFromR501();
    var evtDefs = smDef.LinkedFromR502();

    int index = 0;

    evtDefs = evtDefs.OrderBy(e => e.Attr_Numb);

            
            #line default
            #line hidden
            this.Write("        public enum Events\r\n        {\r\n");
            
            #line 50 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    foreach (var evtDef in evtDefs)
    {
        var evtName = GeneratorNames.GetEventEnumLabelName(objDef, evtDef);
        var comment = $"// {evtDef.Attr_Mning}";

            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 56 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(evtName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 56 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            
            #line 56 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
 if (++index < evtDefs.Count()) { 
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 56 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 56 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comment));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 57 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    }

            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n");
            
            #line 62 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"


    stateDefs = stateDefs.OrderBy(s => s.Attr_Numb);
    index = 0;

            
            #line default
            #line hidden
            this.Write("        public enum States\r\n        {\r\n            _NoState_ = 0,\r\n");
            
            #line 70 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    foreach (var stateDef in stateDefs)
    {
        var stateName = GeneratorNames.GetStateEnumLabelName(stateDef);
        

            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 76 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 76 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(++index));
            
            #line default
            #line hidden
            
            #line 76 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
 if (index < stateDefs.Count()) { 
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 76 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 78 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    }

            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n");
            
            #line 83 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    var definedEventArgIFs = new List<string>();
    foreach(var evtDef in evtDefs)
    {
        bool definedEvent = false;
        string argIFName = GetEventArgsInterfaceName(evtDef, ref definedEvent);
        if (definedEvent)
        {
            if (!definedEventArgIFs.Contains(argIFName))
            {
                definedEventArgIFs.Add(argIFName);

            
            #line default
            #line hidden
            this.Write("        private interface ");
            
            #line 95 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argIFName));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n");
            
            #line 97 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

        var evtdiDefs = evtDef.LinkedFromR532();
        foreach (var evtdiDef in evtdiDefs)
        {
            var evtdiName = evtdiDef.Attr_Name;
            var dtDef = evtdiDef.LinkedToR524();
            var dataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);

            
            #line default
            #line hidden
            this.Write("            public ");
            
            #line 105 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 105 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(evtdiName));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 106 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

        }

            
            #line default
            #line hidden
            this.Write("        }\r\n");
            
            #line 110 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

            }
        }
    }


    bool hasCreationEvent = false;
    foreach(var evtDef in evtDefs)
    {
        var evtClassName = GeneratorNames.GetEventClassName(objDef, evtDef);
        var evtName = GeneratorNames.GetEventEnumLabelName(objDef, evtDef);
        bool existArgIF = false;
        string argIFName = GetEventArgsInterfaceName(evtDef, ref existArgIF);

            
            #line default
            #line hidden
            this.Write("        public class ");
            
            #line 124 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(evtClassName));
            
            #line default
            #line hidden
            this.Write(" : EventData");
            
            #line 124 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
 if (existArgIF) { 
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 124 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argIFName));
            
            #line default
            #line hidden
            
            #line 124 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            ");
            
            #line 127 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(" reciever;\r\n\r\n            public ");
            
            #line 129 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(evtClassName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 129 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(" reciever) : base(\"");
            
            #line 129 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(evtClassName));
            
            #line default
            #line hidden
            this.Write("\", (int)Events.");
            
            #line 129 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(evtName));
            
            #line default
            #line hidden
            this.Write(")\r\n            {\r\n                this.reciever = reciever;\r\n            }\r\n\r\n   " +
                    "         public override void Send()\r\n            {\r\n                reciever.Ta" +
                    "keEvent(this);\r\n            }\r\n\r\n");
            
            #line 139 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

        var subEvtDef = evtDef.SubClassR525();
        if (subEvtDef is CIMClassSM_SEVT)
        {
            var sevtDef = (CIMClassSM_SEVT)subEvtDef;
            var subSevtDef = sevtDef.SubClassR526();
            if (subSevtDef is CIMClassSM_NLEVT)
            {
                var nlevtDef = (CIMClassSM_NLEVT)subSevtDef;
                var pevtDef = nlevtDef.LinkedToR527();
                
            }
            else if (subSevtDef is CIMClassSM_LEVT)
            {
                var levtDef = (CIMClassSM_LEVT)subSevtDef;
                var crtxnDef = levtDef.LinkedFromR509();
                if (crtxnDef != null)
                {
                    var creationStateDef = crtxnDef.CIMSuperClassSM_TXN().LinkedToR506();
                    string creationStateName = GeneratorNames.GetStateEnumLabelName(creationStateDef);
                    hasCreationEvent = true;
                }
            }
        }
        else if (subEvtDef is CIMClassSM_PEVT)
        {

        }

        bool isCreationEvent = IsCreationEvent(evtDef);
        var evtdiDefs = evtDef.LinkedFromR532();
        var createArgs = "";
        var constructorCallArgs = "";
        foreach (var evtdiDef in evtdiDefs)
        {
            var evtdiName = evtdiDef.Attr_Name;
            var dtDef = evtdiDef.LinkedToR524();
            var dataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
            if (!string.IsNullOrEmpty(constructorCallArgs))
            {
                constructorCallArgs += ", ";
            }
            createArgs += $", {dataTypeName} {evtdiName}";
            constructorCallArgs += $"{evtdiName} = {evtdiName}";

            
            #line default
            #line hidden
            this.Write("            public ");
            
            #line 184 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 184 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(evtdiName));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 185 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

        }
        if (!string.IsNullOrEmpty(constructorCallArgs))
        {
            constructorCallArgs = " { " + constructorCallArgs + " }";
        }
        string domainClassBaseName = GeneratorNames.GetDomainClassImplName(objDef);

            
            #line default
            #line hidden
            this.Write("            public static ");
            
            #line 193 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(evtClassName));
            
            #line default
            #line hidden
            this.Write(" Create(");
            
            #line 193 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(" receiver");
            
            #line 193 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(createArgs));
            
            #line default
            #line hidden
            this.Write(", bool isSelfEvent, bool sendNow");
            
            #line 193 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
 if (isCreationEvent) { 
            
            #line default
            #line hidden
            this.Write(", InstanceRepository instanceRepository, Logger logger");
            
            #line 193 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
 } 
            
            #line default
            #line hidden
            this.Write(")\r\n            {\r\n                var newEvent = new ");
            
            #line 195 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(evtClassName));
            
            #line default
            #line hidden
            this.Write("(receiver)");
            
            #line 195 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(constructorCallArgs));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 196 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

        if (isCreationEvent)
        {

            
            #line default
            #line hidden
            this.Write("                if (receiver == null && instanceRepository != null)\r\n            " +
                    "    {\r\n                    receiver = ");
            
            #line 202 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassBaseName));
            
            #line default
            #line hidden
            this.Write(".CreateInstance(instanceRepository, logger);\r\n                }\r\n                " +
                    "if (sendNow)\r\n                {\r\n                    receiver.TakeEvent(newEvent" +
                    ");\r\n                }\r\n");
            
            #line 208 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write(@"                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent, isSelfEvent);
                    }
                }
                else
                {
                    if (sendNow)
                    {
                        newEvent = null;
                    }
                }
");
            
            #line 227 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

        }

            
            #line default
            #line hidden
            this.Write("\r\n                return newEvent;\r\n            }\r\n\r\n            public override " +
                    "IDictionary<string, object> GetSupplementalData()\r\n            {\r\n              " +
                    "  var supplementalData = new Dictionary<string, object>();\r\n\r\n");
            
            #line 238 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

        foreach (var evtdiDef in evtdiDefs)
        {
            var evtdiName = evtdiDef.Attr_Name;
            var dtDef = evtdiDef.LinkedToR524();
            var dataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);

            
            #line default
            #line hidden
            this.Write("                supplementalData.Add(\"");
            
            #line 245 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(evtdiName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 245 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(evtdiName));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 246 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

        }

            
            #line default
            #line hidden
            this.Write("\r\n                return supplementalData;\r\n            }\r\n        }\r\n\r\n");
            
            #line 254 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    }


            
            #line default
            #line hidden
            this.Write("        protected ");
            
            #line 258 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(" target;\r\n\r\n        protected InstanceRepository instanceRepository;\r\n\r\n        p" +
                    "rotected string DomainName { get { return target.DomainName; } }\r\n\r\n        // C" +
                    "onstructor\r\n");
            
            #line 265 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    if (hasCreationEvent)
    {

            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 269 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineClassName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 269 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(" target, bool synchronousMode, InstanceRepository instanceRepository, Logger logg" +
                    "er) : base(0, synchronousMode, logger)\r\n");
            
            #line 270 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    }
    else
    {

            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 275 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineClassName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 275 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(" target, bool synchronousMode, InstanceRepository instanceRepository, Logger logg" +
                    "er) : base(1, synchronousMode, logger)\r\n");
            
            #line 276 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    }

            
            #line default
            #line hidden
            this.Write("        {\r\n            this.target = target;\r\n            this.stateTransition = " +
                    "this;\r\n            this.logger = logger;\r\n            this.instanceRepository = " +
                    "instanceRepository;\r\n        }\r\n\r\n");
            
            #line 286 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    var stateTransferTableDef = new List<StateTransfersEntry>();
    foreach (var stateDef in stateDefs)
    {
        var semeDefs = stateDef.LinkedOtherSideR503();
        var nextTransitions = new List<NexTransition>();
        foreach(var semeDef in semeDefs)
        {
            var triggerEvtDef = semeDef.LinkedOtherSideR503().CIMSuperClassSM_EVT();
            var subSemeDef = semeDef.SubClassR504();
            var nextTransition = new NexTransition() { EvtDef = triggerEvtDef, EventNumber=triggerEvtDef.Attr_Numb, NextStateDef = null, IsCantHappen = false, IsIgnore = false };
            if (subSemeDef is CIMClassSM_NSTXN)
            {
                var netxnDef = (CIMClassSM_NSTXN)subSemeDef;
                var nextStateDef = netxnDef.CIMSuperClassSM_TXN().LinkedToR506();
                nextTransition.NextStateDef = nextStateDef;
            }
            else if (subSemeDef is CIMClassSM_EIGN)
            {
                nextTransition.IsIgnore= true;
            }
            else if (subSemeDef is CIMClassSM_CH)
            {
                nextTransition.IsCantHappen = true;
            }
            nextTransitions.Add(nextTransition);
        }
        var nextTxns = nextTransitions.OrderBy(nxt => (nxt.EventNumber));
        var sttEntry = new StateTransfersEntry() { StateDef = stateDef, StateNumber = stateDef.Attr_Numb, NexTransitions = nextTxns };
        stateTransferTableDef.Add(sttEntry);
    }

    int sttColumns = stateTransferTableDef[0].NexTransitions.Count();
    int sttRows = stateTransferTableDef.Count;

            
            #line default
            #line hidden
            this.Write("        protected int[,] stateTransitionTable = new int[");
            
            #line 321 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sttRows));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 321 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sttColumns));
            
            #line default
            #line hidden
            this.Write("]\r\n            {\r\n");
            
            #line 323 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    var sttDef = stateTransferTableDef.OrderBy(entry => entry.StateNumber);
    index = 0;
    foreach(var sttEntry in sttDef)
    {
        string sttRowDef = "";
        foreach(var nt in sttEntry.NexTransitions)
        {
            if (!string.IsNullOrEmpty(sttRowDef))
            {
                sttRowDef += ", ";
            }
            string nextState = "";
             if (nt.NextStateDef != null)
             {
                 nextState = $"States.{GeneratorNames.ToProgramAvailableString(nt.NextStateDef.Attr_Name)}";
             }
             else
             {
                 if (nt.IsIgnore)
                 {
                     nextState = "ITransition.Transition.Ignore";
                 }
                 else if (nt.IsCantHappen)
                 {
                     nextState = "ITransition.Transition.CantHappen";
                 }
             }
             sttRowDef += $"(int){nextState}";
         }

            
            #line default
            #line hidden
            this.Write("                { ");
            
            #line 354 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sttRowDef));
            
            #line default
            #line hidden
            this.Write(" }");
            
            #line 354 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
 if (++index < stateTransferTableDef.Count()) { 
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 354 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 356 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    }

            
            #line default
            #line hidden
            this.Write("            };\r\n\r\n");
            
            #line 361 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    var logSttTxn0 = new logging.Logging("logger", "            ", objDef, "target", logging.Logging.Mode.StatTransition, "entering");
    var logSttTxnE0Gen = logSttTxn0.TransformText();
    var logSttTxn1 = new logging.Logging("logger", "            ", objDef, "target", logging.Logging.Mode.StatTransition, "entered");
    var logSttTxnE1Gen = logSttTxn1.TransformText();

            
            #line default
            #line hidden
            this.Write(@"        public int GetNextState(int currentState, int eventNumber)
        {
            return stateTransitionTable[currentState, eventNumber];
        }

        private List<ChangedState> changedStates;

        protected override void RunEntryAction(int nextState, EventData eventData)
        {
");
            
            #line 376 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(logSttTxnE0Gen));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n            changedStates = new List<ChangedState>();\r\n\r\n            switch (" +
                    "nextState)\r\n            {\r\n");
            
            #line 382 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    foreach (var stateDef in stateDefs)
    {
        var stateMethodName = GeneratorNames.GetStateActionMethodName(stateDef);
        var stateLabelName = GeneratorNames.GetStateEnumLabelName(stateDef);

            
            #line default
            #line hidden
            this.Write("            case (int)States.");
            
            #line 388 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateLabelName));
            
            #line default
            #line hidden
            this.Write(":\r\n");
            
            #line 389 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

        bool ifDefined = false;
        string argsIfName = "";
        var triggerEvtDef = GetEventArgsInterfaceNameForTheState(stateDef,ref argsIfName, ref ifDefined);
        string actionArgs = "";
        if (ifDefined)
        {
            var evtdiDefs = triggerEvtDef.LinkedFromR532();
            foreach (var evtdiDef in evtdiDefs)
            {
                var argName = evtdiDef.Attr_Name;
                var argDtDef = evtdiDef.LinkedToR524();
                var argTypeName = DomainDataTypeDefs.GetDataTypeName(argDtDef);
                if (!string.IsNullOrEmpty(actionArgs))
                {
                    actionArgs += ", ";
                }
                actionArgs += $"(({argsIfName})eventData).{argName}";
            }
        }

            
            #line default
            #line hidden
            this.Write("                ");
            
            #line 410 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateMethodName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 410 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(actionArgs));
            
            #line default
            #line hidden
            this.Write(");\r\n                break;\r\n");
            
            #line 412 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"

    }

            
            #line default
            #line hidden
            this.Write("            }\r\n");
            
            #line 416 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassStateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(logSttTxnE1Gen));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n            instanceRepository.SyncChangedStates(changedStates);\r\n        }\r\n" +
                    "    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class DomainClassStateMachineBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
