// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 17.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp.template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Kae.CIM.MetaModel.CIMofCIM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class DomainClassBase : DomainClassBaseBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 1 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

  // Copyright (c) Knowledge & Experience. All rights reserved.
  // Licensed under the MIT license. See LICENSE file in the project root for full license information.

            
            #line default
            #line hidden
            this.Write("// ------------------------------------------------------------------------------" +
                    "\r\n// <auto-generated>\r\n//     This file is generated by tool.\r\n//     Runtime Ve" +
                    "rsion : ");
            
            #line 14 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(version));
            
            #line default
            #line hidden
            this.Write(@"
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace ");
            
            #line 27 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nameSpace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 29 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

    var domainClassName = GeneratorNames.GetDomainClassName(objDef);
    var domainBaseInterfaceName = GeneratorNames.GetDomainClassBaseInterfaceName();
    var subClassInterfaces = DomainClassDefs.GetSubClassInterfaces(objDef);
    var domainClassBaseName = GeneratorNames.GetDomainClassImplName(objDef);
    string stateMachineLocalVariableName = "stateMachine";
    string linkedInstanceClassName = GeneratorNames.GetLinkedInstanceClassName();

    string changedStateClassName = "";
    string changedStateVarName = "";
    GeneratorNames.GetChangedStoreVariable(ref changedStateClassName, ref changedStateVarName);


            
            #line default
            #line hidden
            this.Write("    public partial class ");
            
            #line 42 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassBaseName));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 42 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        protected static readonly string className = \"");
            
            #line 44 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objDef.Attr_Key_Lett));
            
            #line default
            #line hidden
            this.Write("\";\r\n        public string ClassName { get { return className; } }\r\n\r\n        Inst" +
                    "anceRepository instanceRepository;\r\n        protected Logger logger;\r\n\r\n");
            
            #line 50 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

    bool hasStateMachine = false;
    var ismDef = objDef.LinkedFromR518();
    if (ismDef != null)
    {
        hasStateMachine = true;
    }

    var implAttrDefs = new List<AttributeDef>();
    var attrDefs = objDef.LinkedFromR102();
    foreach (var attrDef in attrDefs)
    {
        var implAttrDef = new AttributeDef() { AttrDef = attrDef, IsIdentity = false, IsReferential = false, IsUniqueId = false, IsState = false };
        var attrPropName = GeneratorNames.GetAttrPropertyName(attrDef);
        var dtDef = DomainDataTypeDefs.GetBaseDT(attrDef);
        var attrPropDataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
        implAttrDef.DataTypeName = attrPropDataTypeName;
        bool generate = true;
        if (hasStateMachine)
        {
            if (dtDef.Attr_Name == "state<State_Model>")
            {
                implAttrDef.IsState = true;
            }
        }

        var subAttrDef = attrDef.SubClassR106();
        if (subAttrDef is not CIMClassO_RATTR)
        {
            var oidaDefs = attrDef.LinkedOneSideR105();
            foreach (var oidaDef in oidaDefs)
            {
                var oidDef = oidaDef.LinkedOneSideR105();
                implAttrDef.IsIdentity = true;
                if (dtDef.Attr_Name == "unique_id")
                {
                    implAttrDef.IsUniqueId = true;
                }
            }
        }
        else
        {
            implAttrDef.IsReferential = true;
        }
        implAttrDefs.Add(implAttrDef);
    }
    // Constructor Gen
    string constructorArgs = "";
    foreach (var implAttrDef in implAttrDefs)
    {
        if (!implAttrDef.IsReferential)
        {
            if (!string.IsNullOrEmpty(constructorArgs))
            {
                constructorArgs += ", ";
            }
            constructorArgs += implAttrDef.AttrDef.Attr_Name;
        }
    }
    // Constructor Signature
    var logInstanceCreation = new logging.Logging("logger", "            ", objDef, "newInstance", logging.Logging.Mode.InstanceLifeCycle, "create");
    var logInstanceCreationGen = logInstanceCreation.TransformText();

            
            #line default
            #line hidden
            this.Write("        public static ");
            
            #line 113 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassBaseName));
            
            #line default
            #line hidden
            this.Write(" CreateInstance(InstanceRepository instanceRepository, Logger logger=null, ");
            
            #line 113 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(changedStateClassName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 113 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(changedStateVarName));
            
            #line default
            #line hidden
            this.Write("=null)\r\n        {\r\n            var newInstance = new ");
            
            #line 115 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassBaseName));
            
            #line default
            #line hidden
            this.Write("(instanceRepository, logger);\r\n");
            
            #line 116 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(logInstanceCreationGen));
            
            #line default
            #line hidden
            this.Write("\r\n            instanceRepository.Add(newInstance);\r\n\r\n            if (");
            
            #line 119 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(changedStateVarName));
            
            #line default
            #line hidden
            this.Write(" !=null) ");
            
            #line 119 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(changedStateVarName));
            
            #line default
            #line hidden
            this.Write(".Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = ne" +
                    "wInstance, ChangedProperties = null });\r\n\r\n            return newInstance;\r\n    " +
                    "    }\r\n\r\n        public ");
            
            #line 124 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassBaseName));
            
            #line default
            #line hidden
            this.Write("(InstanceRepository instanceRepository, Logger logger)\r\n        {\r\n            th" +
                    "is.instanceRepository = instanceRepository;\r\n            this.logger = logger;\r\n" +
                    "");
            
            #line 128 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

    // Constructor Body
    foreach(var implAttrDef in implAttrDefs)
    {
        string propName = GeneratorNames.GetAttrPropertyName(implAttrDef.AttrDef);
        string propLocalName = GeneratorNames.GetAttrPropertyLocalName(implAttrDef.AttrDef);
        if (implAttrDef.IsIdentity && (implAttrDef.IsReferential == false))
        {
            if (implAttrDef.IsUniqueId)
            {
                var newGuid = Guid.NewGuid().ToString();

            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 140 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propLocalName));
            
            #line default
            #line hidden
            this.Write(" = Guid.NewGuid().ToString();\r\n");
            
            #line 141 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

            }
        }
        else
        {
            if (implAttrDef.IsState)
            {
                string stateMachineClassName = GeneratorNames.GetStateMachineClassName(objDef);

            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 150 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineLocalVariableName));
            
            #line default
            #line hidden
            this.Write(" = new ");
            
            #line 150 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineClassName));
            
            #line default
            #line hidden
            this.Write("(this, instanceRepository, logger);\r\n");
            
            #line 151 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

            }
        }
    }

            
            #line default
            #line hidden
            this.Write("        }\r\n");
            
            #line 157 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

    // attribute generation
    var propertiesGen = new ciclass.PropertyDef("        ", objDef, true);
    string propertiesGenCode = propertiesGen.TransformText();

            
            #line default
            #line hidden
            
            #line 162 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertiesGenCode));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        // This method can be used as compare predicattion when calling Insta" +
                    "nceRepository\'s SelectInstances method. \r\n        public static bool Compare(");
            
            #line 165 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(" instance, IDictionary<string, object> conditionPropertyValues)\r\n        {\r\n     " +
                    "       bool result = true;\r\n            foreach (var propertyName in conditionPr" +
                    "opertyValues.Keys)\r\n            {\r\n                switch (propertyName)\r\n      " +
                    "          {\r\n");
            
            #line 172 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

    foreach(var implAttrDef in implAttrDefs)
    {
        var dtDef = DomainDataTypeDefs.GetBaseDT(implAttrDef.AttrDef);
        var attrPropDataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
        string propName = GeneratorNames.GetAttrPropertyName(implAttrDef.AttrDef);
        var attrDataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
        if (!implAttrDef.IsState)
        {

            
            #line default
            #line hidden
            this.Write("                    case \"");
            
            #line 182 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(implAttrDef.AttrDef.Attr_Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n                        if ((");
            
            #line 183 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrPropDataTypeName));
            
            #line default
            #line hidden
            this.Write(")conditionPropertyValues[propertyName] != instance.");
            
            #line 183 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propName));
            
            #line default
            #line hidden
            this.Write(")\r\n                        {\r\n                            result = false;\r\n      " +
                    "                  }\r\n                        break;\r\n");
            
            #line 188 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

        }
    }

            
            #line default
            #line hidden
            this.Write("                }\r\n                if (result== false)\r\n                {\r\n      " +
                    "              break;\r\n                }\r\n            }\r\n            return resul" +
                    "t;\r\n        }\r\n");
            
            #line 199 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

        var relationshipGenf = new ciclass.RelationshipDef("        ", objDef, true);
        string relationshipDef = relationshipGenf.TransformText();


            
            #line default
            #line hidden
            
            #line 204 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relationshipDef));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 206 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"


    if (hasStateMachine)
    {
        string takeEventMethodName = GeneratorNames.GetTakeEventMethodName();
        string takeEventLogArgs = GetIdentityPropertiesArgsInFormattedString(objDef, "this");

            
            #line default
            #line hidden
            this.Write("        public void ");
            
            #line 213 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(takeEventMethodName));
            
            #line default
            #line hidden
            this.Write("(EventData domainEvent, bool selfEvent=false)\r\n        {\r\n            if (selfEve" +
                    "nt)\r\n            {\r\n                ");
            
            #line 217 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineLocalVariableName));
            
            #line default
            #line hidden
            this.Write(".ReceivedSelfEvent(domainEvent).Wait();\r\n            }\r\n            else\r\n       " +
                    "     {\r\n                ");
            
            #line 221 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineLocalVariableName));
            
            #line default
            #line hidden
            this.Write(".ReceivedEvent(domainEvent).Wait();\r\n            }\r\n            if (logger != nul" +
                    "l) logger.LogInfo($\"@{DateTime.Now.ToString(\"yyyyMMddHHmmss.fff\")}:");
            
            #line 223 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objDef.Attr_Key_Lett));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 223 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(takeEventLogArgs));
            
            #line default
            #line hidden
            this.Write("):takeEvent({domainEvent.EventNumber})\");\r\n        }\r\n\r\n");
            
            #line 226 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

    }


            
            #line default
            #line hidden
            this.Write("        \r\n        public bool Validate()\r\n        {\r\n            bool isValid = t" +
                    "rue;\r\n");
            
            #line 234 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

    var joinedRgos = DomainClassDefs.GetJoinedRGOs(objDef);
    foreach (var rgo in joinedRgos)
    {
        var subRgo = rgo.SubClassR205();
        if (subRgo is CIMClassR_FORM)
        {
            var rformDef = (CIMClassR_FORM)subRgo;
            var rsimpDef = rformDef.LinkedToR208();
            var relDef = rsimpDef.CIMSuperClassR_REL();
            var partDefs = rsimpDef.LinkedFromR207();
            if (partDefs.Count() > 0)
            {
                if (partDefs.Count() > 1)
                {
                    // TODO: ???
                }
                var partDef = partDefs.FirstOrDefault();
                var targetObjDef = partDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
                var targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                if (partDef.Attr_Mult == 0)
                {
                    string relVarName = GeneratorNames.GetRelLocalVariableName(relDef, targetObjDef, partDef.Attr_Txt_Phrs);
                    if (partDef.Attr_Cond==0)
                    {

            
            #line default
            #line hidden
            this.Write("            if (");
            
            #line 260 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relVarName));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n            {\r\n                isValid = false;\r\n            }\r\n");
            
            #line 264 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

                    }
                }
            }
        }
        else if (subRgo is CIMClassR_SUB)
        {
            var rsupDef = (CIMClassR_SUB)subRgo;
            var rsubsupDef = rsupDef.LinkedToR213();
            var relDef = rsubsupDef.CIMSuperClassR_REL();
            var targetObjDef = rsubsupDef.LinkedFromR212().CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            string targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
            string relVarName = GeneratorNames.GetRelLocalVariableName(relDef, targetObjDef, "");

            
            #line default
            #line hidden
            this.Write("            if (");
            
            #line 278 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relVarName));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n            {\r\n                isValid = false;\r\n            }\r\n");
            
            #line 282 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

        }
        else if (subRgo is CIMClassR_ASSR)
        {
            var rassrDef = (CIMClassR_ASSR)subRgo;
            var rassocDef = rassrDef.LinkedToR211();
            var relDef = rassocDef.CIMSuperClassR_REL();
            var raoneDef = rassocDef.LinkedFromR209();
            var raothDef = rassocDef.LinkedFromR210();

            var oneObjDef = raoneDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            var oneObjTypeName = GeneratorNames.GetDomainClassName(oneObjDef);
            var oneArgName = $"oneInstance{GeneratorNames.ToProgramAvailableString(raoneDef.Attr_Txt_Phrs)}";
            string relVarName = GeneratorNames.GetRelLocalVariableName(relDef, oneObjDef, raoneDef.Attr_Txt_Phrs);

            
            #line default
            #line hidden
            this.Write("            if (");
            
            #line 297 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relVarName));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n            {\r\n                isValid = false;\r\n            }\r\n");
            
            #line 301 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"


            var otherObjDef = raothDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            var otherObjTypeName = GeneratorNames.GetDomainClassName(otherObjDef);
            var otherArgName = $"otherInstance{GeneratorNames.ToProgramAvailableString(raothDef.Attr_Txt_Phrs)}";
            relVarName = GeneratorNames.GetRelLocalVariableName(relDef, otherObjDef, raothDef.Attr_Txt_Phrs);

            
            #line default
            #line hidden
            this.Write("            if (");
            
            #line 308 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relVarName));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n            {\r\n                isValid = false;\r\n            }\r\n");
            
            #line 312 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

        }
    }

    var joinedRtos = DomainClassDefs.GetJoinedRTOs(objDef);
    foreach (var rto in joinedRtos)
    {
        var subRto = rto.SubClassR204();
        if (subRto is CIMClassR_PART)
        {
            var rpartDef = (CIMClassR_PART)subRto;
            var rsimpDef = rpartDef.LinkedToR207();
            var relDef = rsimpDef.CIMSuperClassR_REL();
            var rformDef = rsimpDef.LinkedFromR208();
            if (rformDef != null)
            {
                var targetObjDef = rformDef.CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
                string targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "", rformDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);

                if (rformDef.Attr_Mult == 0)
                {
                    if (rformDef.Attr_Cond == 0)
                    {

            
            #line default
            #line hidden
            this.Write("            if (this.");
            
            #line 337 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLinked));
            
            #line default
            #line hidden
            this.Write("() == null)\r\n            {\r\n                isValid = false;\r\n            }\r\n\r\n");
            
            #line 342 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

                    }
                }
                else
                {
                    if (rformDef.Attr_Cond == 0)
                    {

            
            #line default
            #line hidden
            this.Write("            if (this.");
            
            #line 350 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLinked));
            
            #line default
            #line hidden
            this.Write("().Count() == 0)\r\n            {\r\n                isValid = false;\r\n            }\r" +
                    "\n\r\n");
            
            #line 355 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

                    }
                }
            }
        }
        else if (subRto is CIMClassR_AONE)
        {
            var raoneDef = (CIMClassR_AONE)subRto;
            var rassocDef = raoneDef.LinkedToR209();
            var relDef = rassocDef.CIMSuperClassR_REL();
            var targetObjDef = rassocDef.LinkedFromR211().CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
            var raothDef = rassocDef.LinkedFromR210();
            string targetTypeName = GeneratorNames.GetDomainClassName(targetObjDef);
            string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "Other", raothDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
            string condtion = GetRelCondition(rassocDef.LinkedFromR211().CIMSuperClassR_RGO(), targetTypeName, false);
            if (raothDef.Attr_Mult == 0)
            {
                if (raothDef.Attr_Cond == 0)
                {

            
            #line default
            #line hidden
            this.Write("            if (this.");
            
            #line 375 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLinked));
            
            #line default
            #line hidden
            this.Write("() == null)\r\n            {\r\n                isValid = false;\r\n            }\r\n\r\n");
            
            #line 380 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

                }
            }
            else
            {
                if (raothDef.Attr_Cond == 0)
                {

            
            #line default
            #line hidden
            this.Write("            if (this.");
            
            #line 388 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLinked));
            
            #line default
            #line hidden
            this.Write("().Count() == 0)\r\n            {\r\n                isValid = false;\r\n            }\r" +
                    "\n\r\n");
            
            #line 393 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

                }
            }
        }
        else if (subRto is CIMClassR_AOTH)
        {
            var raothDef = (CIMClassR_AOTH)subRto;
            var rassocDef = raothDef.LinkedToR210();
            var relDef = rassocDef.CIMSuperClassR_REL();
            var targetObjDef = rassocDef.LinkedFromR211().CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
            string targetType = GeneratorNames.GetDomainClassName(targetObjDef);
            var raoneDef = rassocDef.LinkedFromR209();
            string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "One", raoneDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
            string condtion = GetRelCondition(rassocDef.LinkedFromR211().CIMSuperClassR_RGO(), targetType, false);
            if (raoneDef.Attr_Mult == 0)
            {
                if (raoneDef.Attr_Cond == 0)
                {

            
            #line default
            #line hidden
            this.Write("            if (this.");
            
            #line 412 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLinked));
            
            #line default
            #line hidden
            this.Write("() == null)\r\n            {\r\n                isValid = false;\r\n            }\r\n\r\n");
            
            #line 417 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

                }
            }
            else
            {
                if (raoneDef.Attr_Cond == 0)
                {

            
            #line default
            #line hidden
            this.Write("            if (this.");
            
            #line 425 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameLinked));
            
            #line default
            #line hidden
            this.Write("().Count() == 0)\r\n            {\r\n                isValid = false;\r\n            }\r" +
                    "\n\r\n");
            
            #line 430 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

                }
            }
        }
        else if (subRto is CIMClassR_SUPER)
        {
            var superDef = (CIMClassR_SUPER)subRto;
            var subsupDef = superDef.LinkedToR212();
            var subsupRelDef = subsupDef.CIMSuperClassR_REL();
            var subClassIFName = GeneratorNames.GetSubRelInterfaceName(subsupRelDef);
            var subClassGetMethodName = GeneratorNames.GetSubRelClassMethodName(subsupRelDef);

            
            #line default
            #line hidden
            this.Write("            if (this.");
            
            #line 442 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(subClassGetMethodName));
            
            #line default
            #line hidden
            this.Write("() == null)\r\n            {\r\n                isValid = false;\r\n            }\r\n");
            
            #line 446 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

        }
    }
    // string logDeleteAttrDefs = GetIdentityPropertiesArgsInFormattedString(objDef, "this");
    var logInstanceDelete = new logging.Logging("logger", "            ", objDef, "this", logging.Logging.Mode.InstanceLifeCycle, "delete");
    var logInstanceDeleteGen = logInstanceDelete.TransformText();

            
            #line default
            #line hidden
            this.Write("            return isValid;\r\n        }\r\n\r\n        public void DeleteInstance(");
            
            #line 456 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(changedStateClassName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 456 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(changedStateVarName));
            
            #line default
            #line hidden
            this.Write("=null)\r\n        {\r\n");
            
            #line 458 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(logInstanceDeleteGen));
            
            #line default
            #line hidden
            this.Write(@"
            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
");
            
            #line 467 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

    foreach (var implAttrDef in implAttrDefs)
    {
        var attrDef = implAttrDef.AttrDef;
        var dtDef = DomainDataTypeDefs.GetBaseDT(attrDef);
        string dataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
        string localPropVarName = GeneratorNames.GetAttrPropertyLocalName(attrDef);
        string stateOfPropVarName = GeneratorNames.GetPropertyStateVariableName(attrDef);
        if (implAttrDef.IsState)
        {

            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 478 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineLocalVariableName));
            
            #line default
            #line hidden
            this.Write(".ForceUpdateState((int)propertyValues[\"");
            
            #line 478 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrDef.Attr_Name));
            
            #line default
            #line hidden
            this.Write("\"]);\r\n");
            
            #line 479 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 484 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(localPropVarName));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 484 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataTypeName));
            
            #line default
            #line hidden
            this.Write(")propertyValues[\"");
            
            #line 484 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrDef.Attr_Name));
            
            #line default
            #line hidden
            this.Write("\"];\r\n            ");
            
            #line 485 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateOfPropVarName));
            
            #line default
            #line hidden
            this.Write(" = false;\r\n");
            
            #line 486 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

        }
    }


            
            #line default
            #line hidden
            this.Write("        }\r\n        \r\n        public IDictionary<string, object> ChangedProperties" +
                    "()\r\n        {\r\n            var results = new Dictionary<string, object>();\r\n");
            
            #line 496 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

    foreach (var implAttrDef in implAttrDefs)
    {
        var attrDef = implAttrDef.AttrDef;
        var dtDef = DomainDataTypeDefs.GetBaseDT(attrDef);
        string dataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
        string localPropVarName = GeneratorNames.GetAttrPropertyLocalName(attrDef);
        string stateOfPropVarName = GeneratorNames.GetPropertyStateVariableName(attrDef);
        if (implAttrDef.IsState)
        {

            
            #line default
            #line hidden
            this.Write("            results.Add(\"");
            
            #line 507 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrDef.Attr_Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 507 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineLocalVariableName));
            
            #line default
            #line hidden
            this.Write(".CurrentState);\r\n\r\n");
            
            #line 509 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("            if (");
            
            #line 514 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateOfPropVarName));
            
            #line default
            #line hidden
            this.Write(")\r\n            {\r\n                results.Add(\"");
            
            #line 516 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrDef.Attr_Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 516 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(localPropVarName));
            
            #line default
            #line hidden
            this.Write(");\r\n                ");
            
            #line 517 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateOfPropVarName));
            
            #line default
            #line hidden
            this.Write(" = false;\r\n            }\r\n");
            
            #line 519 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

        }
    }


            
            #line default
            #line hidden
            this.Write("\r\n            return results;\r\n        }\r\n\r\n        public string GetIdentities()" +
                    "\r\n        {\r\n            string identities = $\"");
            
            #line 530 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

        bool first = true;
        var oidDefs = objDef.LinkedFromR104();
        foreach(var oidDef in oidDefs)
        {
            if (oidDef.Attr_Oid_ID == 0)
            {
                var oidaDefs = oidDef.LinkedOtherSideR105();
                foreach (var oidaDef in oidaDefs)
                {
                    var attrDef = oidaDef.LinkedOtherSideR105();
                    string propName = GeneratorNames.GetAttrPropertyName(attrDef);
                    if (first == false) { 
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 542 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
 } 
            
            #line default
            #line hidden
            
            #line 542 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrDef.Attr_Name));
            
            #line default
            #line hidden
            this.Write("={this.");
            
            #line 542 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propName));
            
            #line default
            #line hidden
            this.Write("}");
            
            #line 542 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

                    first = false;
                }
            }
        }

            
            #line default
            #line hidden
            this.Write("\";\r\n\r\n            return identities;\r\n        }\r\n        \r\n        public IDictio" +
                    "nary<string, object> GetProperties(bool onlyIdentity)\r\n        {\r\n            va" +
                    "r results = new Dictionary<string, object>();\r\n\r\n");
            
            #line 556 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

    foreach (var implAttrDef in implAttrDefs)
    {
        var attrDef = implAttrDef.AttrDef;
        var dtDef = DomainDataTypeDefs.GetBaseDT(attrDef);
        string dataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
        string localPropVarName = GeneratorNames.GetAttrPropertyLocalName(attrDef);
        string stateOfPropVarName = GeneratorNames.GetPropertyStateVariableName(attrDef);
        if (implAttrDef.IsState)
        {

            
            #line default
            #line hidden
            this.Write("            results.Add(\"");
            
            #line 567 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrDef.Attr_Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 567 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineLocalVariableName));
            
            #line default
            #line hidden
            this.Write(".CurrentState);\r\n");
            
            #line 568 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

        }
        else
        {
            if (implAttrDef.IsIdentity)
            {

            
            #line default
            #line hidden
            this.Write("            results.Add(\"");
            
            #line 575 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrDef.Attr_Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 575 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(localPropVarName));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 576 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

            }
            else
            {

            
            #line default
            #line hidden
            this.Write("            if (!onlyIdentity) results.Add(\"");
            
            #line 581 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrDef.Attr_Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 581 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(localPropVarName));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 582 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\DomainClassBase.tt"

            }
        }
    }


            
            #line default
            #line hidden
            this.Write(@"
            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class DomainClassBaseBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
