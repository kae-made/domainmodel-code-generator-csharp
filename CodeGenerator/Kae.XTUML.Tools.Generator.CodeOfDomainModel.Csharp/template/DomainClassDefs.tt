<#
  // Copyright (c) Knowledge & Experience. All rights reserved.
  // Licensed under the MIT license. See LICENSE file in the project root for full license information.
#>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Kae.CIM.MetaModel.CIMofCIM" #>
<#@ import namespace="Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp.template.ciclass" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : <#= version #>
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Kae.StateMachine;
using Kae.DomainModel.Csharp.Framework;

<#
    var domainBaseInterfaceName = GeneratorNames.GetDomainClassBaseInterfaceName();

    string changedStateClassName = "";
    string changedStateVarName = "";
    GeneratorNames.GetChangedStoreVariable(ref changedStateClassName, ref changedStateVarName);

    bool written = false;
#>
namespace <#= nameSpace #>
{
<#
    foreach (var classObjDef in classObjDefs)
    {
        var objDef = (CIMClassO_OBJ)classObjDef;
        var domainClassName = GeneratorNames.GetDomainClassName(objDef);
        var subClassInterfaces = GetSubClassInterfaces(objDef);

        bool hasStateMachine = false;
        var ismDef = objDef.LinkedFromR518();
        if (ismDef != null)
        {
            hasStateMachine = true;
        }
#>

    public interface <#= domainClassName #> : <#= domainBaseInterfaceName #><# if (!string.IsNullOrEmpty(subClassInterfaces)) { #>, <#= subClassInterfaces #><# } #>

    {
<#
        var propertiesGen = new ciclass.PropertyDef("        ", objDef, false, usedExternalEntities, coloringManager, isAzureIoTHub, logger);
        string propertiesGenCode = propertiesGen.TransformText();
#>
        // Conceptual Information Class's Properties

<#= propertiesGenCode #>

<#
        
        if (hasStateMachine)
        {
            string takeEventMethodName = GeneratorNames.GetTakeEventMethodName();
#>
        // State Machine

        void <#= takeEventMethodName #>(EventData domainEvent, bool selfEvent=false);

<#
        }

        var relationshipGenf = new ciclass.RelationshipDef("        ", objDef, false);
        string relationshipDef = relationshipGenf.TransformText();

#>
        // Relationships 

<#= relationshipDef #>

<#
        var operationsGen = new ciclass.ClassOperationDef("        ", objDef, false, usedExternalEntities, coloringManager, isAzureIoTHub, logger);
        string operationGenCode = operationsGen.TransformText();
#>
        // Conceptual Information Class's Operations

<#= operationGenCode #>

    }
<#
    }
#>
}
