<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Kae.CIM.MetaModel.CIMofCIM" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : <#= version #>
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Kae.StateMachine;

<#
    var domainBaseInterfaceName = GeneratorNames.GetDomainClassBaseInterfaceName();
#>
namespace <#= nameSpace #>
{
    public interface <#= domainBaseInterfaceName #> : IDisposable
    {
        public string ClassName { get; }
        /// <summary>
        /// Check attributes and links are valid or not.
        /// </summary>
        /// <returns></returns>
        bool Validate();     
    }
<#
    foreach (var classObjDef in classObjDefs)
    {
        var objDef = (CIMClassO_OBJ)classObjDef;
        var domainClassName = GeneratorNames.GetDomainClassName(objDef);
        var subClassInterfaces = GetSubClassInterfaces(objDef);

        bool hasStateMachine = false;
        var ismDef = objDef.LinkedFromR518();
        if (ismDef != null)
        {
            hasStateMachine = true;
        }
#>

    public interface <#= domainClassName #> : <#= domainBaseInterfaceName #><# if (!string.IsNullOrEmpty(subClassInterfaces)) { #>, <#= subClassInterfaces #><# } #>

    {
<#
        bool written = false;
        var attrDefs = objDef.LinkedFromR102();
        foreach(var attrDef in attrDefs)
        {
            var attrPropName = GeneratorNames.GetAttrPropertyName(attrDef);
            var dtDef = DomainDataTypeDefs.GetBaseDT(attrDef);
            var attrPropDataTypeName = DomainDataTypeDefs.GetDataTypeName(dtDef);
            bool generate = true;
            bool isStateAttr = false;
            if (hasStateMachine)
            {
                if (dtDef.Attr_Name == "state<State_Model>")
                {
                    isStateAttr = true;
                }
            }

            if (generate)
            {
                written = true;
                string accessors = "get;";
                var subAttrDef = attrDef.SubClassR106();
                if (subAttrDef is not CIMClassO_RATTR)
                {
                    bool isIdentity = false;
                    var oidaDefs = attrDef.LinkedOneSideR105();
                    foreach(var oidaDef in oidaDefs)
                    {
                        var oidDef = oidaDef.LinkedOneSideR105();
                        isIdentity = true;
                    }
                    if (isIdentity == false && isStateAttr == false)
                    {
                        accessors += " set;";
                    }
                }
#>
        <#= attrPropDataTypeName #> <#= attrPropName #> { <#= accessors #> }
<#

            }

        }

        if (written)
        {
            written = false;
#>

<#
        }
        if (hasStateMachine)
        {
            string takeEventMethodName = GeneratorNames.GetTakeEventMethodName();
#>
        void <#= takeEventMethodName #>(EventData domainEvent);

<#
        }

        var joinedRgos = GetJoinedRGOs(objDef);
        foreach(var rgo in joinedRgos)
        {
            var subRgo = rgo.SubClassR205();
            if (subRgo is CIMClassR_FORM)
            {
                var rformDef = (CIMClassR_FORM)subRgo;
                var rsimpDef = rformDef.LinkedToR208();
                var relDef = rsimpDef.CIMSuperClassR_REL();
                var partDefs = rsimpDef.LinkedFromR207();
                if (partDefs.Count() > 0)
                {
                    if (partDefs.Count() > 1)
                    {
                        // TODO: ???
                    }
                    var partDef = partDefs.First();
                    string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "", partDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
                    var targetObjDef = partDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
                    var targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                    string returnType = "";
                    if (partDef.Attr_Mult == 0)
                    {
                        returnType = targetClassName;
                        string methodNameLink = GeneratorNames.GetRelationshipMethodName(relDef, "", partDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Link);
                        string methodNameUnLink = GeneratorNames.GetRelationshipMethodName(relDef, "", partDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Unlink);
#>
        bool <#= methodNameLink #>(<#= targetClassName #> instance);
        bool <#= methodNameUnLink #>(<#= targetClassName #> instance);
<#
                    }
                    else
                    {
                        returnType = $"IEnumerable<{targetClassName}>";
                    }
#>
        <#= returnType #> <#= methodNameLinked #>();

<#
                    written = true;
                }
            }
            else if (subRgo is CIMClassR_SUB)
            {
                var rsupDef = (CIMClassR_SUB)subRgo;
                var rsubsupDef = rsupDef.LinkedToR213();
                var relDef = rsubsupDef.CIMSuperClassR_REL();
                string methodNameLink = GeneratorNames.GetRelationshipMethodName(relDef, "", "", GeneratorNames.RelLinkMethodType.Link);
                string methodNameUnlink = GeneratorNames.GetRelationshipMethodName(relDef, "", "", GeneratorNames.RelLinkMethodType.Unlink);
                var targetObjDef = rsubsupDef.LinkedFromR212().CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
                string targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                string methodNameLinked = GeneratorNames.GetSuperTypeMethodName(rsubsupDef);
#>
//        <#= targetClassName #> <#= methodNameLinked #>();
        bool <#= methodNameLink #>(<#= targetClassName #> instance);
        bool <#= methodNameUnlink #>(<#= targetClassName #> instance);

<#
            }
            else if (subRgo is CIMClassR_ASSR)
            {
                var rassrDef = (CIMClassR_ASSR)subRgo;
                var rassocDef = rassrDef.LinkedToR211();
                var relDef = rassocDef.CIMSuperClassR_REL();
                var raoneDef = rassocDef.LinkedFromR209();
                var raothDef = rassocDef.LinkedFromR210();
                string methodNameLink = GeneratorNames.GetRelationshipMethodName(relDef, "", "", GeneratorNames.RelLinkMethodType.Link);
                string methodNameUnlink = GeneratorNames.GetRelationshipMethodName(relDef, "", "", GeneratorNames.RelLinkMethodType.Unlink);

                string methodNameLinkedOne = GeneratorNames.GetRelationshipMethodName(relDef, "One", raoneDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
                var oneObjDef = raoneDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
                var oneObjTypeName = GeneratorNames.GetDomainClassName(oneObjDef);
                var oneArgName = $"oneInstance{GeneratorNames.ToProgramAvailableString(raoneDef.Attr_Txt_Phrs)}";

                string methodNameLinkedOther = GeneratorNames.GetRelationshipMethodName(relDef, "Other", raothDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
                var otherObjDef = raothDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
                var otherObjTypeName = GeneratorNames.GetDomainClassName(otherObjDef);
                var otherArgName = $"otherInstance{GeneratorNames.ToProgramAvailableString(raothDef.Attr_Txt_Phrs)}";
#>
        bool <#= methodNameLink #>(<#= oneObjTypeName #> <#= oneArgName #>, <#= otherObjTypeName #> <#= otherArgName #>);
        bool <#= methodNameUnlink #>(<#= oneObjTypeName #> <#= oneArgName #>, <#= otherObjTypeName #> <#= otherArgName #>);
        <#= oneObjTypeName #> <#= methodNameLinkedOne #>();
        <#= otherObjTypeName #> <#= methodNameLinkedOther #>();

<#
            }
        }

        var joinedRtos = GetJoinedRTOs(objDef);
        foreach(var rto in joinedRtos)
        {
            var subRto = rto.SubClassR204();
            if (subRto is CIMClassR_PART)
            {
                var rpartDef = (CIMClassR_PART)subRto;
                var rsimpDef = rpartDef.LinkedToR207();
                var relDef = rsimpDef.CIMSuperClassR_REL();
                var rformDef = rsimpDef.LinkedFromR208();
                if (rformDef != null)
                {
                    var targetObjDef = rformDef.CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
                    string targetClassName = GeneratorNames.GetDomainClassName(targetObjDef);
                    string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "", rformDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
                    string returnType = "";
                    if (rformDef.Attr_Mult == 0)
                    {
                        returnType = targetClassName;
                    }
                    else
                    {
                        returnType = $"IEnumerable<{targetClassName}>";
                    }
#>
        <#= returnType #> <#= methodNameLinked #>();

<#
                }
            }
            else if (subRto is CIMClassR_AONE)
            {
                var raoneDef = (CIMClassR_AONE)subRto;
                var rassocDef = raoneDef.LinkedToR209();
                var relDef = rassocDef.CIMSuperClassR_REL();
                var targetObjDef = rassocDef.LinkedFromR211().CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
                var raothDef = rassocDef.LinkedFromR210();
                string targetTypeName = GeneratorNames.GetDomainClassName(targetObjDef);
                string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef,"One",raothDef.Attr_Txt_Phrs,GeneratorNames.RelLinkMethodType.Linked);
                string returnType = "";
                if (raothDef.Attr_Mult == 0)
                {
                    returnType = targetTypeName;
                }
                else
                {
                    returnType = $"IEnumerable<{targetTypeName}>";
                }
#>
        <#= returnType #> <#= methodNameLinked #>();

<#
            }
            else if (subRto is CIMClassR_AOTH)
            {
                var raothDef = (CIMClassR_AOTH)subRto;
                var rassocDef = raothDef.LinkedToR210();
                var relDef = rassocDef.CIMSuperClassR_REL();
                var targetObjDef = rassocDef.LinkedFromR211().CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
                string targetType = GeneratorNames.GetDomainClassName(targetObjDef);
                var raoneDef = rassocDef.LinkedFromR209();
                string methodNameLinked = GeneratorNames.GetRelationshipMethodName(relDef, "Other", raoneDef.Attr_Txt_Phrs, GeneratorNames.RelLinkMethodType.Linked);
                string returnType = "";
                if (raoneDef.Attr_Mult == 0)
                {
                    returnType = targetType;
                }
                else
                {
                    returnType = $"IEnumerable<{targetType}>";
                }
#>
        <#= returnType #> <#= methodNameLinked #>();

<#
            }
            else if (subRto is CIMClassR_SUPER)
            {
                var superDef = (CIMClassR_SUPER)subRto;
                var subsupRelDef = superDef.LinkedToR212().CIMSuperClassR_REL();
                var subClassIFName = GeneratorNames.GetSubRelInterfaceName(subsupRelDef);
                var subClassGetMethodName = GeneratorNames.GetSubRelClassMethodName(subsupRelDef);
#>
        <#= subClassIFName #> <#= subClassGetMethodName #>();

<#
                var subDefs = superDef.LinkedToR212().LinkedFromR213();
                foreach(var subDef in subDefs)
                {
                    var subObjDef = subDef.CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
                    string methodNameLinked = GeneratorNames.GetRelationshipMethodName(subsupRelDef, "", "", GeneratorNames.RelLinkMethodType.Linked) + subObjDef.Attr_Key_Lett;
                    string returnType = GeneratorNames.GetDomainClassName(subObjDef);
#>
        <#= returnType #> <#= methodNameLinked #>();

<#
                }
            }
        }

        var tfrDefs = objDef.LinkedFromR115();
        foreach (var tfrDef in tfrDefs)
        {
            string opName = GeneratorNames.GetTfrOpName(tfrDef);
            var retDtDef = tfrDef.LinkedToR116();
            var retTypeName = DomainDataTypeDefs.GetDataTypeName(retDtDef);
            var tparmDefs = tfrDef.LinkedFromR117();
            string args = "";
            foreach(var tparmDef in tparmDefs)
            {
                var paramTypeDef = tparmDef.LinkedToR118();
                string paramTypeName = DomainDataTypeDefs.GetDataTypeName(paramTypeDef);
                string frag = $"{paramTypeName} {tparmDef.Attr_Name}";
                if (!string.IsNullOrEmpty(args))
                {
                    args += $", ";
                }
                args += $"{frag}";
            }
#>
        <#= retTypeName #> <#= opName #>(<#= args #>);

<#
        }
#>
    }
<#
    }
#>
}
