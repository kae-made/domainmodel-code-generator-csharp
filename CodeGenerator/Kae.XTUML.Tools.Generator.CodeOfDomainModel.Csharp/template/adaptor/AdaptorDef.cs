// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 17.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp.template.adaptor
{
    using System.Linq;
    using System.Text;
    using System.IO;
    using System.Collections.Generic;
    using Kae.CIM.MetaModel.CIMofCIM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class AdaptorDef : AdaptorDefBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 1 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

  // Copyright (c) Knowledge & Experience. All rights reserved.
  // Licensed under the MIT license. See LICENSE file in the project root for full license information.

            
            #line default
            #line hidden
            this.Write("// ------------------------------------------------------------------------------" +
                    "\r\n// <auto-generated>\r\n//     This file is generated by tool.\r\n//     Runtime Ve" +
                    "rsion : ");
            
            #line 15 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(version));
            
            #line default
            #line hidden
            this.Write(@"
//  
// </auto-generated>
// ------------------------------------------------------------------------------
using Kae.DomainModel.Csharp.Framework.Adaptor;
using Kae.Utility.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ");
            
            #line 27 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nameSpace));
            
            #line default
            #line hidden
            this.Write(".Adaptor\r\n{\r\n");
            
            #line 29 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    Initialize();

    string domainFacadeClassName = GeneratorNames.GetDomainFacadeClassName(nameSpace);
    string adaptorName = $"{nameSpace}Adaptor";

            
            #line default
            #line hidden
            this.Write("    public class ");
            
            #line 35 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(adaptorName));
            
            #line default
            #line hidden
            this.Write(" : DomainModelAdaptor\r\n    {\r\n        ");
            
            #line 37 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainFacadeClassName));
            
            #line default
            #line hidden
            this.Write(" domainModel;\r\n\r\n        public ");
            
            #line 39 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(adaptorName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 39 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainFacadeClassName));
            
            #line default
            #line hidden
            this.Write(" domainModel, Logger logger) : base(logger)\r\n        {\r\n            this.domainMo" +
                    "del = domainModel;\r\n        }\r\n\r\n");
            
            #line 44 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    var sb = new StringBuilder();
    indent = "        ";
    var writer = new StringWriter(sb);
    string currentIndent = $"{indent}{baseIndent}";

    // domain operation dictionary generation

            
            #line default
            #line hidden
            this.Write("        protected Dictionary<string, Dictionary<string, ParamSpec>> domainOpsPara" +
                    "mSpecs = new Dictionary<string, Dictionary<string, ParamSpec>>()\r\n        {\r\n");
            
            #line 54 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    int syncCount = 1;
    foreach (var syncSpecKey in domainOpSpecs.Keys)
    {
        var syncSpec = domainOpSpecs[syncSpecKey];

            
            #line default
            #line hidden
            this.Write("            {\r\n                \"");
            
            #line 61 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(syncSpecKey));
            
            #line default
            #line hidden
            this.Write("\", new Dictionary<string, ParamSpec>()\r\n");
            
            #line 62 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        if (syncSpec.Parameters.Count > 0)
        {

            
            #line default
            #line hidden
            this.Write("                {\r\n");
            
            #line 67 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        int paramCount = 1;
        foreach (var paramSpecKey in syncSpec.Parameters.Keys) {
            var paramSpec = syncSpec.Parameters[paramSpecKey];
            string code = GetParamSpecCreateCode(paramSpec);

            
            #line default
            #line hidden
            this.Write("                    { \"");
            
            #line 73 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramSpecKey));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 73 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(code));
            
            #line default
            #line hidden
            this.Write(" }");
            
            #line 73 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (paramCount < syncSpec.Parameters.Count) { 
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 73 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 75 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            paramCount++;
        }

            
            #line default
            #line hidden
            this.Write("                }\r\n");
            
            #line 80 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        }

            
            #line default
            #line hidden
            this.Write("            }");
            
            #line 83 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (syncCount < domainOpSpecs.Count) { 
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 83 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 85 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        syncCount++;
    }

            
            #line default
            #line hidden
            this.Write("        };\r\n\r\n");
            
            #line 91 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    // dictionaly class spec

            
            #line default
            #line hidden
            this.Write("        protected Dictionary<string, ClassSpec> classSpecs = new Dictionary<strin" +
                    "g, ClassSpec>()\r\n        {\r\n");
            
            #line 96 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    int classCount = 1;
    foreach (var classSpecKey in classSpecs.Keys)
    {
        var classSpec = classSpecs[classSpecKey];

            
            #line default
            #line hidden
            this.Write("            {\r\n                \"");
            
            #line 103 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classSpec.Name));
            
            #line default
            #line hidden
            this.Write("\", new ClassSpec()\r\n                {                \r\n                    Name =" +
                    " \"");
            
            #line 105 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classSpec.Name));
            
            #line default
            #line hidden
            this.Write("\",\r\n                    KeyLetter = \"");
            
            #line 106 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classSpec.KeyLetter));
            
            #line default
            #line hidden
            this.Write("\",\r\n                    Properties = new Dictionary<string, PropSpec>()");
            
            #line 107 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (classSpec.Properties.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\r\n                    {\r\n");
            
            #line 110 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        int itemCount = 1;
        foreach (var propKey in classSpec.Properties.Keys)
        {
            var prop = classSpec.Properties[propKey];

            
            #line default
            #line hidden
            this.Write("                        {\r\n                            \"");
            
            #line 117 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));
            
            #line default
            #line hidden
            this.Write("\", new PropSpec()\r\n                            { Name = \"");
            
            #line 118 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));
            
            #line default
            #line hidden
            this.Write("\", DataType = ParamSpec.DataType.");
            
            #line 118 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.DataType.ToString()));
            
            #line default
            #line hidden
            this.Write(", Identity = ");
            
            #line 118 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Identity));
            
            #line default
            #line hidden
            this.Write(", Writable = ");
            
            #line 118 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Writable.ToString().ToLower()));
            
            #line default
            #line hidden
            this.Write(", Mathematical = ");
            
            #line 118 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Mathematical.ToString().ToLower()));
            
            #line default
            #line hidden
            this.Write(", Reference = ");
            
            #line 118 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Reference.ToString().ToLower()));
            
            #line default
            #line hidden
            this.Write(", StateMachineState = ");
            
            #line 118 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.StateMachineState.ToString().ToLower()));
            
            #line default
            #line hidden
            this.Write(" }\r\n                        }");
            
            #line 119 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (itemCount < classSpec.Properties.Count) { 
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 119 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 121 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            itemCount++;
        }

            
            #line default
            #line hidden
            this.Write("                    }");
            
            #line 125 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } 
            
            #line default
            #line hidden
            this.Write(",\r\n                    Operations = new Dictionary<string, OperationSpec>()");
            
            #line 126 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (classSpec.Operations.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\r\n                    {\r\n");
            
            #line 129 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        int itemCount = 1;
        foreach (var opKey in classSpec.Operations.Keys)
        {
            var op = classSpec.Operations[opKey];

            
            #line default
            #line hidden
            this.Write("                        {\r\n                            \"");
            
            #line 136 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.Name));
            
            #line default
            #line hidden
            this.Write("\", new OperationSpec()\r\n                            {\r\n                          " +
                    "      Name = \"");
            
            #line 138 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.Name));
            
            #line default
            #line hidden
            this.Write("\", ReturnType = ParamSpec.DataType.");
            
            #line 138 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ReturnType));
            
            #line default
            #line hidden
            this.Write(", Parameters = new Dictionary<string, ParamSpec>()\r\n");
            
            #line 139 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            if (op.Parameters.Count > 0)
            {
                int opParamCount = 1;

            
            #line default
            #line hidden
            this.Write("                                {\r\n");
            
            #line 145 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

                foreach (var opParamKey in op.Parameters.Keys)
                {
                    var opParam = op.Parameters[opParamKey];
                    string code = GetParamSpecCreateCode(opParam);

            
            #line default
            #line hidden
            this.Write("                                    { \"");
            
            #line 151 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(opParam.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 151 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(code));
            
            #line default
            #line hidden
            this.Write(" }");
            
            #line 151 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (opParamCount < op.Parameters.Count) { 
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 151 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 153 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"


                    opParamCount++;
                }

            
            #line default
            #line hidden
            this.Write("                                }\r\n");
            
            #line 159 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            }

            
            #line default
            #line hidden
            this.Write("                            }");
            
            #line 162 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (itemCount < classSpec.Operations.Count) { 
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 162 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n                        }\r\n");
            
            #line 165 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"


            itemCount++;
        }

            
            #line default
            #line hidden
            this.Write("                    }");
            
            #line 170 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } 
            
            #line default
            #line hidden
            this.Write(",\r\n                    Links = new Dictionary<string, LinkSpec>()");
            
            #line 171 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (classSpec.Links.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\r\n                    {\r\n");
            
            #line 174 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        int itemCount = 1;
        foreach (var linkKey in classSpec.Links.Keys)
        {
            var link = classSpec.Links[linkKey];

            
            #line default
            #line hidden
            this.Write("                        {\r\n                            \"");
            
            #line 181 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(link.Name));
            
            #line default
            #line hidden
            this.Write("\", new LinkSpec()\r\n                            { Name = \"");
            
            #line 182 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(link.Name));
            
            #line default
            #line hidden
            this.Write("\", RelID = \"");
            
            #line 182 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(link.RelID));
            
            #line default
            #line hidden
            this.Write("\", Phrase = \"");
            
            #line 182 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(link.Phrase));
            
            #line default
            #line hidden
            this.Write("\", Set = ");
            
            #line 182 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(link.Set.ToString().ToLower()));
            
            #line default
            #line hidden
            this.Write(", Condition = ");
            
            #line 182 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(link.Condition.ToString().ToLower()));
            
            #line default
            #line hidden
            this.Write(", DstKeyLett = \"");
            
            #line 182 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(link.DstKeyLett));
            
            #line default
            #line hidden
            this.Write("\" }\r\n                        }");
            
            #line 183 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (itemCount < classSpec.Links.Count) { 
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 183 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 185 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"


            itemCount++;
        }

            
            #line default
            #line hidden
            this.Write("                    }");
            
            #line 190 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } 
            
            #line default
            #line hidden
            this.Write(",\r\n                    Events = new Dictionary<string, OperationSpec>()");
            
            #line 191 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (classSpec.Events.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\r\n                    {\r\n");
            
            #line 194 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        int itemCount = 1;
        foreach (var eventKey in classSpec.Events.Keys)
        {
            var eventSpec = classSpec.Events[eventKey];

            
            #line default
            #line hidden
            this.Write("                        {\r\n                            \"");
            
            #line 201 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(eventSpec.Name));
            
            #line default
            #line hidden
            this.Write("\", new OperationSpec()\r\n                            {\r\n                          " +
                    "      Name = \"");
            
            #line 203 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(eventSpec.Name));
            
            #line default
            #line hidden
            this.Write("\", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, Para" +
                    "mSpec>()");
            
            #line 203 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (eventSpec.Parameters.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\r\n                                {\r\n");
            
            #line 206 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            int evtParamCount = 1;
            foreach (var epKey in eventSpec.Parameters.Keys)
            {
                var evtParam = eventSpec.Parameters[epKey];
                string code = GetParamSpecCreateCode(evtParam);

            
            #line default
            #line hidden
            this.Write("                                    { \"");
            
            #line 213 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(evtParam.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 213 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(code));
            
            #line default
            #line hidden
            this.Write(" }");
            
            #line 213 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (evtParamCount < eventSpec.Parameters.Count) { 
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 213 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 215 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

                evtParamCount++;
            }

            
            #line default
            #line hidden
            this.Write("                                }\r\n");
            
            #line 220 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 222 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                            }\r\n                        }");
            
            #line 224 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (itemCount < classSpec.Events.Count) { 
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 224 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 226 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"


            itemCount++;
        }

            
            #line default
            #line hidden
            this.Write("                    }");
            
            #line 231 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n                }\r\n            }");
            
            #line 234 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (classCount < classSpecs.Count) { 
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 234 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 236 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        classCount++;        
    }

            
            #line default
            #line hidden
            this.Write("        };\r\n\r\n");
            
            #line 242 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    // Invoke Domain Operation
    string invVarName = "invSpec";

            
            #line default
            #line hidden
            this.Write(@"        public override string InvokeDomainOperation(string name, RequestingParameters parameters)
        {
            string result = ""{}"";
            if (domainOpsParamSpecs.ContainsKey(name))
            {
                var opSpec = domainOpsParamSpecs[name];
                RequestingParameters invSpec = new RequestingParameters();
                if (CheckParameters(opSpec, parameters, ");
            
            #line 253 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(invVarName));
            
            #line default
            #line hidden
            this.Write("))\r\n                {\r\n                    switch (name)\r\n                    {\r\n" +
                    "");
            
            #line 257 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    foreach (var syncSpecKey in domainOpSpecs.Keys)
    {
        var syncSpec = domainOpSpecs[syncSpecKey];
        string paramCode = GetInvokeParamsCode(syncSpec.Parameters, invVarName);
        string invokeCode = $"domainModel.{syncSpec.Name}({paramCode})";
        string retVal = $"resultOf{syncSpec.Name}";

            
            #line default
            #line hidden
            this.Write("                        case \"");
            
            #line 265 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(syncSpec.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n");
            
            #line 266 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        if (syncSpec.ReturnType != ParamSpec.DataType.Void)
        {

            
            #line default
            #line hidden
            this.Write("                            var ");
            
            #line 270 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(retVal));
            
            #line default
            #line hidden
            this.Write(" = new { result = ");
            
            #line 270 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(invokeCode));
            
            #line default
            #line hidden
            this.Write(" };\r\n                            result = Newtonsoft.Json.JsonConvert.SerializeOb" +
                    "ject(");
            
            #line 271 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(retVal));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 272 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("                            ");
            
            #line 277 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(invokeCode));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 278 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        }

            
            #line default
            #line hidden
            this.Write("                            break;\r\n");
            
            #line 282 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    }

            
            #line default
            #line hidden
            this.Write(@"                    }
                }
            }

            return result;
        }

        public override string InvokeDomainClassOperation(string classKeyLett, string name, RequestingParameters parameters)
        {
            string result = ""{}"";
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Operations.ContainsKey(name))
                {
                    var opSpec = classSpec.Operations[name];
                    var invSpec = new RequestingParameters();
                    if (CheckIdentity(classSpec.Properties, parameters, invSpec))
                    {
                        if(CheckParameters(opSpec.Parameters,parameters, invSpec))
                        {
                            switch (classKeyLett)
                            {
");
            
            #line 308 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    foreach(var csKey in classSpecs.Keys)
    {
        var classSpec = classSpecs[csKey];
        if (classSpec.Operations.Count > 0)
        {
            string domainClassName = GeneratorNames.GetDomainClassName(classSpec.ObjDef);
            string classKeyLett = classSpec.KeyLetter;
            string instVarName = $"instanceOf{classKeyLett}";
            string instSelectedCode = GetSelectedByIdentitiesCode(domainClassName, "selected", invVarName + ".Identities", classSpec.Properties);

            
            #line default
            #line hidden
            this.Write("                                case \"");
            
            #line 319 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classKeyLett));
            
            #line default
            #line hidden
            this.Write("\":\r\n                                    var ");
            
            #line 320 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 320 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(")domainModel.InstanceRepository.GetDomainInstances(\"");
            
            #line 320 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classKeyLett));
            
            #line default
            #line hidden
            this.Write("\").Where(");
            
            #line 320 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instSelectedCode));
            
            #line default
            #line hidden
            this.Write(").First();\r\n                                    if (");
            
            #line 321 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n                                    {\r\n                               " +
                    "         switch (name)\r\n                                        {\r\n");
            
            #line 325 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            foreach (var copKey in classSpec.Operations.Keys)
            {
                var cOpSpec = classSpec.Operations[copKey];
                string paramCode = GetInvokeParamsCode(cOpSpec.Parameters, invVarName);
                string invokeCode = $"{instVarName}.{cOpSpec.Name}({paramCode})";
                string retVal = $"resultOf{cOpSpec.Name}";


            
            #line default
            #line hidden
            this.Write("                                            case \"");
            
            #line 334 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cOpSpec.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n");
            
            #line 335 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        if (cOpSpec.ReturnType == ParamSpec.DataType.Void)
        {

            
            #line default
            #line hidden
            this.Write("                                                ");
            
            #line 339 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(invokeCode));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 340 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("                                                 var ");
            
            #line 345 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(retVal));
            
            #line default
            #line hidden
            this.Write(" = new { result = ");
            
            #line 345 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(invokeCode));
            
            #line default
            #line hidden
            this.Write(" };\r\n                                                result = Newtonsoft.Json.Jso" +
                    "nConvert.SerializeObject(");
            
            #line 346 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(retVal));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 347 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        }

            
            #line default
            #line hidden
            this.Write("                                                break;\r\n");
            
            #line 351 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            }

            
            #line default
            #line hidden
            this.Write("                                        }\r\n                                    }\r" +
                    "\n                                    break;\r\n");
            
            #line 357 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        }
    }

            
            #line default
            #line hidden
            this.Write(@"                            }
                        }
                    }

                }
            }

            return result;
        }

        public override string SendEvent(string classKeyLett, string name, RequestingParameters parameters)
        {
            bool sent = false;
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Operations.ContainsKey(name))
                {
                    var opSpec = classSpec.Operations[name];
                    var invSpec = new RequestingParameters();
                    if (CheckIdentity(classSpec.Properties, parameters, invSpec))
                    {
                        if(CheckParameters(opSpec.Parameters,parameters, invSpec))
                        {
                            switch (classKeyLett)
                            {
");
            
            #line 387 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    foreach(var csKey in classSpecs.Keys)
    {
        var classSpec = classSpecs[csKey];
        if (classSpec.Events.Count > 0)
        {
            string domainClassName = GeneratorNames.GetDomainClassName(classSpec.ObjDef);
            string classKeyLett = classSpec.KeyLetter;
            string instVarName = $"instanceOf{classKeyLett}";
            string instSelectedCode = GetSelectedByIdentitiesCode(domainClassName, "selected", invVarName + ".Identities", classSpec.Properties);

            
            #line default
            #line hidden
            this.Write("                                case \"");
            
            #line 398 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classKeyLett));
            
            #line default
            #line hidden
            this.Write("\":\r\n                                    var ");
            
            #line 399 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 399 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(")domainModel.InstanceRepository.GetDomainInstances(\"");
            
            #line 399 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classKeyLett));
            
            #line default
            #line hidden
            this.Write("\").Where(");
            
            #line 399 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instSelectedCode));
            
            #line default
            #line hidden
            this.Write(").First();\r\n                                    switch (name)\r\n                  " +
                    "                  {\r\n");
            
            #line 402 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            foreach(var evtKey in classSpec.Events.Keys)
            {
                var evtSpec = classSpec.Events[evtKey];
                string stateMachineClassName = GeneratorNames.GetStateMachineClassName(classSpec.ObjDef);
                string evtClassName = GeneratorNames.GetEventClassName(classSpec.ObjDef, evtSpec.EvtDef);
                string evtCreateMethodName = $"{stateMachineClassName}.{evtClassName}.Create";
                string paramCode = GetInvokeParamsCode(evtSpec.Parameters, invVarName);
                if (!string.IsNullOrEmpty(paramCode))
                {
                    paramCode = $", {paramCode}";
                }
                paramCode += ", sendNow:true";
                if (evtSpec.CreationEvent)
                {
                    paramCode += ", domainModel.InstanceRepository, logger:logger";
                }
                string evtInvCode = $"{evtCreateMethodName}({instVarName}{paramCode})";

            
            #line default
            #line hidden
            this.Write("                                        case \"");
            
            #line 421 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(evtClassName));
            
            #line default
            #line hidden
            this.Write("\":\r\n                                            ");
            
            #line 422 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(evtInvCode));
            
            #line default
            #line hidden
            this.Write(";\r\n                                            sent = true;\r\n                    " +
                    "                        break;\r\n");
            
            #line 425 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            }

            
            #line default
            #line hidden
            this.Write("                                    }\r\n                                    break;" +
                    "\r\n");
            
            #line 430 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        }
    }

            
            #line default
            #line hidden
            this.Write(@"                            }
                        }
                    }
                }
            }
            var result = new { sent = sent };
            return Newtonsoft.Json.JsonConvert.SerializeObject(result);
        }

        public override string UpdateClassProperties(string classKeyLett, RequestingParameters parameters)
        {
            bool updated = false;
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                var invSpec = new RequestingParameters();
                if (CheckProperties(classSpec.Properties, parameters, invSpec))
                {
                    switch (classKeyLett)
                    {
");
            
            #line 454 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        foreach (var ck in classSpecs.Keys)
        {
            var classSpec = classSpecs[ck];
            string domainClassName = GeneratorNames.GetDomainClassName(classSpec.ObjDef);
            string classKeyLett = classSpec.KeyLetter;
            string instVarName = $"instanceOf{classKeyLett}";
            string instSelectedCode = GetSelectedByIdentitiesCode(domainClassName, "selected", invVarName + ".Identities", classSpec.Properties);
            if (classSpec.NumOfWritableProperties > 0)
            {

            
            #line default
            #line hidden
            this.Write("                        case \"");
            
            #line 465 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classKeyLett));
            
            #line default
            #line hidden
            this.Write("\":\r\n                            var ");
            
            #line 466 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 466 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(")domainModel.InstanceRepository.GetDomainInstances(\"");
            
            #line 466 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classKeyLett));
            
            #line default
            #line hidden
            this.Write("\").Where(");
            
            #line 466 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instSelectedCode));
            
            #line default
            #line hidden
            this.Write(").First();\r\n                            if (");
            
            #line 467 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n                            {\r\n");
            
            #line 469 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

                foreach (var pk in classSpec.Properties.Keys)
                {
                    var propSpec = classSpec.Properties[pk];
                    if (propSpec.Writable)
                    {
                        var attrDef = propSpec.AttrDef;
                        string attrTypeName = DomainDataTypeDefs.GetDataTypeName(DomainDataTypeDefs.GetBaseDT(attrDef));
                        string attrPropName = GeneratorNames.GetAttrPropertyName(attrDef);

            
            #line default
            #line hidden
            this.Write("                                if (invSpec.Parameters.ContainsKey(\"");
            
            #line 479 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk));
            
            #line default
            #line hidden
            this.Write("\"))\r\n                                {\r\n                                    ");
            
            #line 481 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 481 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrPropName));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 481 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrTypeName));
            
            #line default
            #line hidden
            this.Write(")invSpec.Parameters[\"");
            
            #line 481 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk));
            
            #line default
            #line hidden
            this.Write("\"];\r\n                                }\r\n");
            
            #line 483 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

                    }
                }

            
            #line default
            #line hidden
            this.Write("                                updated = true;\r\n                            }\r\n " +
                    "                           break;\r\n");
            
            #line 490 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            }
        }

            
            #line default
            #line hidden
            this.Write(@"                    }              
                }
            }

            var result = new { updated = updated };
            return Newtonsoft.Json.JsonConvert.SerializeObject(result);
        }

        public override string GetInstances(string classKeyLett)
        {
            var resultInstances = new List<Dictionary<string, object>>();
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var instances = domainModel.InstanceRepository.GetDomainInstances(classKeyLett);
                foreach (var instance in instances)
                {
                    switch (classKeyLett)
                    {
");
            
            #line 512 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        foreach (var ck in classSpecs.Keys)
        {
            var classSpec = classSpecs[ck];
            string domainClassName = GeneratorNames.GetDomainClassName(classSpec.ObjDef);
            string classKeyLett = classSpec.KeyLetter;
            string instVarName = $"instanceOf{classKeyLett}";
            string resultInstVarName = $"resultOf{instVarName}";

            
            #line default
            #line hidden
            this.Write("                        case \"");
            
            #line 521 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classKeyLett));
            
            #line default
            #line hidden
            this.Write("\":\r\n                            var ");
            
            #line 522 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 522 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(")instance;\r\n                            var ");
            
            #line 523 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resultInstVarName));
            
            #line default
            #line hidden
            this.Write(" = new Dictionary<string, object>();\r\n");
            
            #line 524 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            foreach (var pk in classSpec.Properties.Keys)
            {
                var propSpec = classSpec.Properties[pk];
                var attrDef = propSpec.AttrDef;
                string attrPropName = GeneratorNames.GetAttrPropertyName(attrDef);

            
            #line default
            #line hidden
            this.Write("                            ");
            
            #line 531 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resultInstVarName));
            
            #line default
            #line hidden
            this.Write(".Add(\"");
            
            #line 531 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 531 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 531 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrPropName));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 532 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            }

            
            #line default
            #line hidden
            this.Write("                            break;\r\n");
            
            #line 536 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    }

            
            #line default
            #line hidden
            this.Write(@"                    }
                }
                
            }

            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstances);
        }

        public override string GetInstance(string classKeyLett, IDictionary<string, string> identities)
        {
            Dictionary<string, object> resultInstance = new Dictionary<string, object>();
            switch (classKeyLett)
            {
");
            
            #line 552 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    foreach (var ck in classSpecs.Keys)
    {
        var classSpec = classSpecs[ck];
        string domainClassName = GeneratorNames.GetDomainClassName(classSpec.ObjDef);
        string classKeyLett = classSpec.KeyLetter;
        string instVarName = $"instanceOf{classKeyLett}";
        string resultInstVarName = $"resultOf{instVarName}";
        string instSelectedCode = GetSelectedByIdentitiesCode(domainClassName, "selected", "identities", classSpec.Properties);

            
            #line default
            #line hidden
            this.Write("                case \"");
            
            #line 562 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classKeyLett));
            
            #line default
            #line hidden
            this.Write("\":\r\n                    ");
            
            #line 563 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 563 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 563 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(")domainModel.InstanceRepository.GetDomainInstances(\"");
            
            #line 563 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classKeyLett));
            
            #line default
            #line hidden
            this.Write("\").Where(");
            
            #line 563 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instSelectedCode));
            
            #line default
            #line hidden
            this.Write(").First();\r\n                    if (");
            
            #line 564 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n                    {\r\n");
            
            #line 566 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        foreach (var pk in classSpec.Properties.Keys)
        {
            var propSpec = classSpec.Properties[pk];
            var attrDef = propSpec.AttrDef;
            string attrPropName = GeneratorNames.GetAttrPropertyName(attrDef);

            
            #line default
            #line hidden
            this.Write("                        resultInstance.Add(\"");
            
            #line 573 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 573 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 573 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrPropName));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 574 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        }

            
            #line default
            #line hidden
            this.Write("                    }\r\n                    break;\r\n");
            
            #line 579 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    }

            
            #line default
            #line hidden
            this.Write(@"            }
            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstance);
        }

        public override string GetLinkedInstances(string classKeyLett, IDictionary<string, string> identities, string relName)
        {
            var resultInstances = new List<Dictionary<string, object>>();
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Links.ContainsKey(relName))
                {
                    switch (classKeyLett)
                    {
");
            
            #line 596 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    foreach (var ck in classSpecs.Keys)
    {
        var classSpec = classSpecs[ck];
        string domainClassName = GeneratorNames.GetDomainClassName(classSpec.ObjDef);
        string classKeyLett = classSpec.KeyLetter;
        string instVarName = $"instanceOf{classKeyLett}";
        string resultInstVarName = $"resultOf{instVarName}";
        string instSelectedCode = GetSelectedByIdentitiesCode(domainClassName, "selected", "identities", classSpec.Properties);

            
            #line default
            #line hidden
            this.Write("                        case \"");
            
            #line 606 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classKeyLett));
            
            #line default
            #line hidden
            this.Write("\":\r\n                            ");
            
            #line 607 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 607 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 607 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domainClassName));
            
            #line default
            #line hidden
            this.Write(")domainModel.InstanceRepository.GetDomainInstances(\"");
            
            #line 607 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classKeyLett));
            
            #line default
            #line hidden
            this.Write("\").Where(");
            
            #line 607 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instSelectedCode));
            
            #line default
            #line hidden
            this.Write(").First();\r\n                            if (");
            
            #line 608 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n                            {\r\n                                switch " +
                    "(relName)\r\n                                {\r\n");
            
            #line 612 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        foreach (var lk in classSpec.Links.Keys)
        {
            var linkSpec = classSpec.Links[lk];
            var dstClassKeyLetter = linkSpec.DstKeyLett;
            string dstDomainClassName = GeneratorNames.GetDomainClassName(linkSpec.DstObjDef);
            string relName = $"{linkSpec.RelID}{linkSpec.Side}{GeneratorNames.ToProgramAvailableString(linkSpec.Phrase)}{linkSpec.DstKeyLett}";
            string relInstVarName = $"linkedInstanceOf{relName}";
            string relInstSetVarName = $"linkedInstancesOf{relName}";
            var propSpecs = classSpecs[dstClassKeyLetter].Properties;

            
            #line default
            #line hidden
            this.Write("                                    case \"");
            
            #line 623 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(linkSpec.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n");
            
            #line 624 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            if (linkSpec.Set)
            {

            
            #line default
            #line hidden
            this.Write("                                        var ");
            
            #line 628 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relInstSetVarName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 628 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 628 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(linkSpec.MethodName));
            
            #line default
            #line hidden
            this.Write("();\r\n                                        foreach (var ");
            
            #line 629 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relInstVarName));
            
            #line default
            #line hidden
            this.Write(" in ");
            
            #line 629 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relInstSetVarName));
            
            #line default
            #line hidden
            this.Write(")\r\n                                        {\r\n");
            
            #line 631 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            }
            else
            {

            
            #line default
            #line hidden
            this.Write("                                        var ");
            
            #line 636 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relInstVarName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 636 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instVarName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 636 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(linkSpec.MethodName));
            
            #line default
            #line hidden
            this.Write("();\r\n                                        if (");
            
            #line 637 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relInstVarName));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n                                        {\r\n");
            
            #line 639 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            }

            
            #line default
            #line hidden
            this.Write("                                            resultInstances.Add(new Dictionary<st" +
                    "ring, object>()\r\n                                            {\r\n");
            
            #line 644 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

            int lpCount = 1;
            foreach (var pk in propSpecs.Keys)
            {
                var propSpec = propSpecs[pk];
                string attrPropName = GeneratorNames.GetAttrPropertyName(propSpec.AttrDef);

            
            #line default
            #line hidden
            this.Write("                                                { \"");
            
            #line 651 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pk));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 651 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relInstVarName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 651 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attrPropName));
            
            #line default
            #line hidden
            this.Write(" }");
            
            #line 651 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 if (lpCount < propSpecs.Count) { 
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 652 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 654 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

                }
                lpCount++;
            }

            
            #line default
            #line hidden
            this.Write("                                            });\r\n                                " +
                    "        }\r\n                                        break;\r\n");
            
            #line 662 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

        }

            
            #line default
            #line hidden
            this.Write("                                }\r\n                            }\r\n               " +
                    "             break;\r\n");
            
            #line 668 "C:\Users\kae-m\source\repos\xtMULMetaModelProjects\Kae.XTUML.Tools.Generator.CodeOfDomainModel.Csharp\template\adaptor\AdaptorDef.tt"

    }

            
            #line default
            #line hidden
            this.Write(@"                    }
                }
            }

            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstances);
        }

        public override string GetDomainOperationsSpec()
        {
            string result = Newtonsoft.Json.JsonConvert.SerializeObject(domainOpsParamSpecs);
            return result;
        }

        public override string GetClassesSpec()
        {
            string result = Newtonsoft.Json.JsonConvert.SerializeObject(classSpecs);
            return result; 
        }

    }
}
");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class AdaptorDefBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
