<#
  // Copyright (c) Knowledge & Experience. All rights reserved.
  // Licensed under the MIT license. See LICENSE file in the project root for full license information.
#>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Kae.CIM.MetaModel.CIMofCIM" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : <#= version #>
//  
// </auto-generated>
// ------------------------------------------------------------------------------
using Azure.Core;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage.AzureDigitalTwins;
using Kae.Utility.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace <#= nameSpace #>.Adaptor
{
<#
    string classImplName = GetAdaptorImplClassName(projectName);
#>
    public class <#= classImplName #> : AzureDigitalTwinsAdaptor
    {

        Dictionary<string, string> cClassToTwinModel = new Dictionary<string, string>()
        {
<#
    int numOfObjDefs = objDefs.Count();
    int indexOfObjDefs = 0;
    foreach(var objDef in objDefs)
    {
        string twinModelId = GetTwinModelId(objDef);
#>
            { "<#= objDef.Attr_Key_Lett #>", "<#= twinModelId #>" }<# if (++indexOfObjDefs < numOfObjDefs) { #>,<# } #>

<#
    }
#>
        };

        Dictionary<string, DTDLRelationshipDef> cRelationshipToTwinRelationships = new Dictionary<string, DTDLRelationshipDef>()
        {
<#
    var dtdlRelDefs = new List<(string RelName, string RelId, string DTDLRelName, string SourceTwinModelId, string TargetTwinModelId, string FormClassKeyLetter, string PartClassKeyLetter)>();
    foreach(var relDef in relDefs)
    {
        var dtdlRelDefSet = GetRelationshipId(relDef);
        foreach(var dtdlRelDef in dtdlRelDefSet)
        {
            dtdlRelDefs.Add(dtdlRelDef);
        }
    }
    int numOfRelDefs = dtdlRelDefs.Count();
    int indexOfRelDefs = 0;
    foreach( var dtdlRelDef in dtdlRelDefs)
    {
        string relName = dtdlRelDef.RelName;
        string dtdlRelId = dtdlRelDef.RelId;
        string dtdlRelName = dtdlRelDef.DTDLRelName;
        string sourceTwinModelId = dtdlRelDef.SourceTwinModelId;
        string targetTwinModelId = dtdlRelDef.TargetTwinModelId;
        string partClassKey = dtdlRelDef.PartClassKeyLetter;
        string formClassKey = dtdlRelDef.FormClassKeyLetter;
#>
            { "<#= relName #>", new DTDLRelationshipDef() { Id="<#= dtdlRelId #>", Name="<#= dtdlRelName #>", SourceTwinModelId="<#= sourceTwinModelId #>", TargetTwinModelId="<#= targetTwinModelId #>", FormClassKeyLetter="<#= formClassKey #>", PartClassKeyLetter="<#= partClassKey #>" } }<# if (++indexOfRelDefs < numOfRelDefs) { #>,<# } #>

<#
    }
#>
        };

        public <#= classImplName #>(string adtInstanceUrl, TokenCredential credential, InstanceRepository repository, Logger logger) : base(adtInstanceUrl, credential, repository, logger)
        {
            ;
        }

        public override DTDLRelationshipDef GetDTDLRelationshipDef(string domainName, string relationshipName)
        {
            return cRelationshipToTwinRelationships[relationshipName];
        }

        public override string GetDTDLTwinModelId(string domainName, string classKeyLetter)
        {
            return cClassToTwinModel[classKeyLetter];
        }

    }
}
