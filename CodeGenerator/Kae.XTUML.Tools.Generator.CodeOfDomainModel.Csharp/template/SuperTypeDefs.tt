<#
  // Copyright (c) Knowledge & Experience. All rights reserved.
  // Licensed under the MIT license. See LICENSE file in the project root for full license information.
#>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Kae.CIM.MetaModel.CIMofCIM" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : <#= version #>
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Kae.DomainModel.Csharp.Framework;
using Kae.Utility.Logging;

namespace <#= nameSpace #>
{
<#
    bool isFirst = true;
    foreach (var classRelDef in classRelDefs)
    {
        var relDef = (CIMClassR_REL)classRelDef;
        var subRelDef = relDef.SubClassR206();
        if (subRelDef is CIMClassR_SUBSUP)
        {
            var interfaceName = GeneratorNames.GetSubRelInterfaceName(relDef);
            var rsuperDef = ((CIMClassR_SUBSUP)subRelDef).LinkedFromR212();
            var objDef = rsuperDef.CIMSuperClassR_RTO().LinkedToR109().LinkedToR104();
            var getSuperClassMethodName = GeneratorNames.GetGetSuperClassMethodName(relDef);
            var superDomainClassName = GeneratorNames.GetDomainClassName(objDef);
            if (isFirst == false)
            {
#>

<#
            }
#>
    public interface <#= interfaceName #>
    {
        public <#= superDomainClassName #> <#= getSuperClassMethodName #>();
    }
<#
            isFirst = false;
        }
    }
    foreach(var classRelDef in classRelDefs)
    {
        var relDef = (CIMClassR_REL)classRelDef;
        var subRelDef = relDef.SubClassR206();
        if (subRelDef is CIMClassR_SUBSUP)
        {
            var subsupRefDef = (CIMClassR_SUBSUP)subRelDef;
            var superDef = subsupRefDef.LinkedFromR212();
            var subDefs = subsupRefDef.LinkedFromR213();
            string factoryClassName = GeneratorNames.GetSubClassFactoryClassName(superDef);
#>

    public static class <#= factoryClassName #>
    {
        public static DomainClassDef CreateInstance(string classKey, InstanceRepository instanceRepository, Logger logger)
        {
            switch (classKey)
            {
<#
            foreach(var subDef in subDefs)
            {
                var subObjDef = subDef.CIMSuperClassR_RGO().CIMSuperClassR_OIR().LinkedOtherSideR201();
                string subObjClassImplName = GeneratorNames.GetDomainClassImplName(subObjDef);
#>
                case "<#= subObjDef.Attr_Key_Lett #>":
                    return <#= subObjClassImplName #>.CreateInstance(instanceRepository, logger);
<#
            }
#>
                default:
                    logger.LogError($"Bad class key letter:'{classKey}' for SubClassR4");
                    break;
            }
            return null;
        }
    }
<#
        }
    }
#>
}
