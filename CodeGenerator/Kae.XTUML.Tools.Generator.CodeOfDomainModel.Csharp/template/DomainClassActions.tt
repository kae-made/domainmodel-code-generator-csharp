<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Kae.CIM.MetaModel.CIMofCIM" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : <#= version #>
//  
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;

namespace <#= nameSpace #>
{
<#
    string stateMachineClassName = GeneratorNames.GetStateMachineClassName(objDef);
#>
    partial class <#= stateMachineClassName #>
    {
<#

    var stateDefs = smDef.LinkedFromR501();

    foreach(var stateDef in stateDefs)
    {
        string actionMethodName = GeneratorNames.GetStateActionMethodName(stateDef);

        string descrip = "";
        var moahDef = stateDef.LinkedOneSideR511();
        if(moahDef != null)
        {
            var actDef = moahDef.CIMSuperClassSM_AH().LinkedToR514();
            if (actDef != null)
            {
                descrip = GeneratorNames.DescripToCodeComment("            ", actDef.Attr_Action_Semantics);
                if (descrip.EndsWith(Environment.NewLine))
                {
                    descrip=descrip.Substring(0, descrip.Length - Environment.NewLine.Length);
                }
            }
        }

        var triggerEvtDef = DomainClassStateMachine.GetTriggerEvent(stateDef);
        var evtDtiDefs = triggerEvtDef.LinkedFromR532();
        string args = "";
        foreach(var evtDtiDef in evtDtiDefs)
        {
            string argName = evtDtiDef.Attr_Name;
            var argDtDef = evtDtiDef.LinkedToR524();
            string argTypeName = DomainDataTypeDefs.GetDataTypeName(argDtDef);
            if (!string.IsNullOrEmpty(args))
            {
                args += ", ";
            }
            args += $"{argTypeName} {argName}";
        }
#>
        protected void <#= actionMethodName #>(<#= args #>)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.
<#= descrip #>

            throw new NotImplementedException();
        }

<#

        //string descrip = GeneratorNames.DescripToCodeComment()
    }
#>
    }
}
