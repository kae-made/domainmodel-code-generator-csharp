<#
  // Copyright (c) Knowledge & Experience. All rights reserved.
  // Licensed under the MIT license. See LICENSE file in the project root for full license information.
#>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Kae.CIM.MetaModel.CIMofCIM" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : <#= version #>
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace <#= nameSpace #>
{
<#
    foreach (var classDtDef in classDtDefs)
    {
        var dtDef = (CIMClassS_DT)classDtDef;
        var subDtDef = dtDef.SubClassR17();
        string descrip = "";
        if (!string.IsNullOrEmpty(dtDef.Attr_Descrip))
        {
            descrip = GeneratorNames.DescripToCodeComment("    ", dtDef.Attr_Descrip);
        }
        if (subDtDef is CIMClassS_CDT)
        {
            // Do Nothing
        }
        else if (subDtDef is CIMClassS_UDT)
        {
            // Do Nothing
        }
        else if (subDtDef is CIMClassS_EDT)
        {
            var edtDef = (CIMClassS_EDT)subDtDef;
            string dtName = GeneratorNames.GetEnumDataTypeName(edtDef);
            if (!string.IsNullOrEmpty(descrip))
            {
#>
<#= descrip #>
<#
            }
#>
    public enum <#= dtName #>
    {
<#
            int index = 0;
            var enumDefs = edtDef.LinkedFromR27();
            foreach(var enumDef in enumDefs)
            {
                string enumName = enumDef.Attr_Name;
                index++;
#>
        <#= enumName #><# if (index < enumDefs.Count()) { #>,<# } #>

<#
            }

#>
    }

<#
        }
        else if (subDtDef is CIMClassS_SDT)
        {
            var sdtDef = (CIMClassS_SDT)subDtDef;
            string dtName = GeneratorNames.GetComplexDataTypeName(sdtDef);
            if (!string.IsNullOrEmpty(descrip))
            {
#>
<#= descrip #>
<#
            }
#>
    public class <#= dtName #>
    {
<#
            var mbrDefs = sdtDef.LinkedFromR44();
            string compare = "";
            foreach(var mbrDef in mbrDefs)
            {
                var mbrDtDef = mbrDef.LinkedToR45();
                string mbrDtName = GetDataTypeName(mbrDtDef);
                string mbrName = mbrDef.Attr_Name;
#>
        public <#= mbrDtName #> <#= mbrName #> { get; set; }
<#
                if (!string.IsNullOrEmpty(compare))
                {
                    compare += " && ";
                }
                compare = $"one.{mbrName} == other.{mbrName}";
            }
#>

        public static bool operator ==(<#= dtName #> one, <#= dtName #> other)
        {
            return (<#= compare #>);
        }

        public static bool operator !=(<#= dtName #> one, <#= dtName #> other)
        {
            return !(one == other);
        }

        public void Restore(IDictionary<string, object> value)
        {
<#
            foreach(var mbrDef in mbrDefs)
            {
                var mbrDtDef = mbrDef.LinkedToR45();
                string mbrDtName = GetDataTypeName(mbrDtDef);
                string mbrName = mbrDef.Attr_Name;
#>
            <#= mbrName #> = (<#= mbrDtName #>)value["<#= mbrName #>"];
<#
            }
#>
        }
    }

<#
        }
    }
#>
}
