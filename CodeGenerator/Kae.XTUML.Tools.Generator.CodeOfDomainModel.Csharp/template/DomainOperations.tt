<#
  // Copyright (c) Knowledge & Experience. All rights reserved.
  // Licensed under the MIT license. See LICENSE file in the project root for full license information.
#>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Kae.CIM.MetaModel.CIMofCIM" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : <#= version #>
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;
using System.Reflection;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace <#= nameSpace #>
{
    public partial class <#= domainFacadeClassName #>
    {
<#
    string changedStateClassName = "";
    string changedStateVarName = "";
    GeneratorNames.GetChangedStoreVariable(ref changedStateClassName, ref changedStateVarName);

    foreach(var syncClassDef in syncClassDefs)
    {
        var syncDef = (CIMClassS_SYNC)syncClassDef;
        var retDtDef = syncDef.LinkedToR25();
        string retDTName = DomainDataTypeDefs.GetDataTypeName(retDtDef);
        var sparmDefs = syncDef.LinkedFromR24();
        string actionSemantics = GeneratorNames.DescripToCodeComment("            ", syncDef.Attr_Action_Semantics);
        string methodName = syncDef.Attr_Name;
        string args = "";
        foreach (var sparmDef in sparmDefs)
        {
            var pDtDef = sparmDef.LinkedToR26();
            var pDTName = DomainDataTypeDefs.GetDataTypeName(pDtDef);
            if (!string.IsNullOrEmpty(args))
            {
                args += ", ";
            }
            args += $"{pDTName} {sparmDef.Attr_Name}";
        }
        // if (!string.IsNullOrEmpty(args))
        // {
        //    args += ", ";
        // }
        // args += $"{changedStateClassName} {changedStateVarName}=null";

#>
        public <#= retDTName #> <#= methodName #>(<#= args #>)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

<#= actionSemantics #>

            var changedStates = new List<ChangedState>();
            
<#
        bool genSyncState = true;
        var fnbDef = syncDef.LinkedFromR695();
        if (fnbDef != null)
        {
            Console.WriteLine($"  - Generating {syncDef.Attr_Name}...");
            var actDef = fnbDef.CIMSuperClassACT_ACT();
            var actDescripGen = new ActDescripGenerator(actDef, "'This Statement should not appear!'", "    ", "        ", usedExternalEntities, coloringManager, logger);
            string code = actDescripGen.Generate();
#>
            // Generated from action description
<#= code #>
<#
        }
        // var retDtDef = syncDef.LinkedToR25();
        if (retDtDef.Attr_Name != "void") genSyncState = false;
        if (genSyncState)
        {
#>
            instanceRepository.SyncChangedStates(changedStates);
<#
        }
        if (fnbDef == null)
        {
#>
            throw new NotImplementedException();
            // Please delete above throw exception statement after implement this method.
<#
        }
#>
        }
<#
    }
#>

        public IList<string> CreateExternalEntities()
        {
            var configuration = new List<string>();
<#
            int numOfEE = 0;
            foreach(var eeKey in usedExternalEntities.Keys)
            {
                var eeDef = usedExternalEntities[eeKey];
                string eeKeyLetter = eeDef.Attr_Key_Lett;
                var eeImplInfo = GetExternalEntityConstructorName(eeDef);
                numOfEE++;
#>
            instanceRepository.Add(new <#= eeImplInfo.New #>());
            var refOf<#= eeKey #> = instanceRepository.GetExternalEntity("<#= eeKey #>");
            configuration.AddRange(refOf<#= eeKey #>.ConfigurationKeys);
<#
            }
#>
            return configuration;
        }
        public void Initialize(IDictionary<string, IDictionary<string, object>> configuration)
        {
<#
            foreach(var eeKey in usedExternalEntities.Keys)
            {
                var eeDef = usedExternalEntities[eeKey];
                string eeKeyLetter = eeDef.Attr_Key_Lett;
#>
            var refOf<#= eeKey #> = instanceRepository.GetExternalEntity("<#= eeKey #>");
            refOf<#= eeKey #>.Initialize(configuration["<#= eeKey #>"]);
<#
            }
#>
        }
    }
}
