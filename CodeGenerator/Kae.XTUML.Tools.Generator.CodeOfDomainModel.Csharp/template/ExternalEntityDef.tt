<#
  // Copyright (c) Knowledge & Experience. All rights reserved.
  // Licensed under the MIT license. See LICENSE file in the project root for full license information.
#>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Kae.CIM.MetaModel.CIMofCIM" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : <#= version #>
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Kae.StateMachine;
using Kae.DomainModel.Csharp.Framework;
using Kae.Utility.Logging;

<#
    string wrapperClassName = GeneratorNames.GetExternalEntityWrappterClassName(eeDef, false);
#>
namespace <#= nameSpace #>.ExternalEntities
{
    public abstract class <#= wrapperClassName #> : ExternalEntityDef
    {
        protected static readonly string eeKeyLetter = "<#= eeDef.Attr_Key_Lett #>";
        public string EEKey { get { return eeKeyLetter; } }

        protected Logger logger;
        public Logger Logger { get { return logger; } set { logger = value; } }

        protected List<string> configuration = new List<string>();
        public IList<string> Configuration { get { return configuration; } }
<#
    var brgDefs = eeDef.LinkedFromR19();
    foreach(var brgDef in brgDefs){
        var retDtDef = brgDef.LinkedToR20();
        string retDtName = DomainDataTypeDefs.GetDataTypeName(retDtDef);
        string paramsCode = "";
        var bparmDefs = brgDef.LinkedFromR21();
        foreach (var bparmDef in bparmDefs)
        {
            var parmDtDef = bparmDef.LinkedToR22();
            var parmDtName= DomainDataTypeDefs.GetDataTypeName(parmDtDef);
            if (!string.IsNullOrEmpty(paramsCode))
            {
                paramsCode += ", ";
            }
            paramsCode += $"{parmDtName} {bparmDef.Attr_Name}";
        }
#>
        public abstract <#= retDtName #> <#= brgDef.Attr_Name #>(<#= paramsCode #>);
<#
    }
#>

        public void Initialize(IDictionary<string, string> configuration)
        {
            InitializeImpl(configuration);
        }

        protected abstract void InitializeImpl(IDictionary<string, string> configuration);
    }
}
